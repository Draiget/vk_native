// This file is automatically generated, do not edit
// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedMember.Global
// ReSharper disable CommentTypo
// ReSharper disable CheckNamespace
namespace vk;

public enum VkImageLayout
{
	/// <summary>
	/// Specifies that the layout is unknown. Image memory <b>cannot</b> be transitioned into this layout. This layout <b>can</b> be used as the pname:initialLayout member of slink:VkImageCreateInfo. This layout <b>can</b> be used in place of the current image layout in a layout transition, but doing so will cause the contents of the image's memory to be undefined:.
	/// </summary>
	Undefined = 0,
	/// <summary>
	/// Supports all types of device access.
	/// </summary>
	General = 1,
	/// <summary>
	/// <b>Must</b> only be used as a color or resolve attachment in a sname:VkFramebuffer. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.ColorAttachment">VkImageUsageFlags.ColorAttachment</see> usage bit enabled.
	/// </summary>
	ColorAttachmentOptimal = 2,
	/// <summary>
	/// Specifies a layout for both the depth and stencil aspects of a depth/stencil format image allowing read and write access as a depth/stencil attachment. It is equivalent to ename:VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL and ename:VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL.
	/// </summary>
	DepthStencilAttachmentOptimal = 3,
	/// <summary>
	/// Specifies a layout for both the depth and stencil aspects of a depth/stencil format image allowing read only access as a depth/stencil attachment or in shaders as a sampled image, combined image/sampler, or input attachment. It is equivalent to ename:VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL and ename:VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL.
	/// </summary>
	DepthStencilReadOnlyOptimal = 4,
	/// <summary>
	/// Specifies a layout allowing read-only access in a shader as a sampled image, combined image/sampler, or input attachment. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.Sampled">VkImageUsageFlags.Sampled</see> or <see cref="VkImageUsageFlags.InputAttachment">VkImageUsageFlags.InputAttachment</see> usage bits enabled.
	/// </summary>
	ShaderReadOnlyOptimal = 5,
	/// <summary>
	/// <b>Must</b> only be used as a source image of a transfer command (see the definition of <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-pipeline-stages-transfer"> <see cref="VkPipelineStageFlags.Transfer">VkPipelineStageFlags.Transfer</see></seealso>). This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.TransferSrc">VkImageUsageFlags.TransferSrc</see> usage bit enabled.
	/// </summary>
	TransferSrcOptimal = 6,
	/// <summary>
	/// <b>Must</b> only be used as a destination image of a transfer command. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.TransferDst">VkImageUsageFlags.TransferDst</see> usage bit enabled.
	/// </summary>
	TransferDstOptimal = 7,
	/// <summary>
	/// Specifies that an image's memory is in a defined layout and <b>can</b> be populated by data, but that it has not yet been initialized by the driver. Image memory <b>cannot</b> be transitioned into this layout. This layout <b>can</b> be used as the pname:initialLayout member of slink:VkImageCreateInfo. This layout is intended to be used as the initial layout for an image whose contents are written by the host, and hence the data <b>can</b> be written to memory immediately, without first executing a layout transition. Currently, <see cref="VkImageLayout.PreInitialized">VkImageLayout.PreInitialized</see> is only useful with <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#glossary-linear-resource">linear</seealso> images because there is not a standard layout defined for <see cref="VkImageTiling.Optimal">VkImageTiling.Optimal</see> images.
	/// </summary>
	PreInitialized = 8,
	/// <summary>
	/// <b>Must</b> only be used for presenting a presentable image for display. A swapchain's image <b>must</b> be transitioned to this layout before calling flink:vkQueuePresentKHR, and <b>must</b> be transitioned away from this layout after calling flink:vkAcquireNextImageKHR.
	/// </summary>
	PresentSrcKhr = 1000001002,
	/// <summary>
	/// <b>Must</b> only be used as a decode output image of a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operation</seealso>. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.VideoDecodeDstKhr">VkImageUsageFlags.VideoDecodeDstKhr</see> usage bit enabled.
	/// </summary>
	VideoDecodeDstKhr = 1000024000,
	/// <summary>
	/// <b>Must</b> only be used as a decode source image of a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operation</seealso>. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.VideoDecodeSrcKhr">VkImageUsageFlags.VideoDecodeSrcKhr</see> usage bit enabled.
	/// </summary>
	VideoDecodeSrcKhr = 1000024001,
	/// <summary>
	/// <b>Must</b> only be used as a decode source or destination image of a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operation</seealso>. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.VideoDecodeDpbKhr">VkImageUsageFlags.VideoDecodeDpbKhr</see> usage bit enabled.
	/// </summary>
	VideoDecodeDpbKhr = 1000024002,
	/// <summary>
	/// Is valid only for shared presentable images, and <b>must</b> be used for any usage the image supports.
	/// </summary>
	SharedPresentKhr = 1000111000,
	DepthReadOnlyStencilAttachmentOptimalKhr = 0,
	DepthAttachmentStencilReadOnlyOptimalKhr = 0,
	ShadingRateOptimal = 0,
	/// <summary>
	/// <b>Must</b> only be used as a fragment density map attachment in a sname:VkRenderPass. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.FragmentDensityMapExt">VkImageUsageFlags.FragmentDensityMapExt</see> usage bit enabled.
	/// </summary>
	FragmentDensityMapOptimalExt = 1000218000,
	/// <summary>
	/// <b>Must</b> only be used as a
	/// </summary>
	FragmentShadingRateAttachmentOptimalKhr = 1000226003,
	DepthAttachmentOptimalKhr = 0,
	DepthReadOnlyOptimalKhr = 0,
	StencilAttachmentOptimalKhr = 0,
	StencilReadOnlyOptimalKhr = 0,
	/// <summary>
	/// <b>Must</b> only be used as a encode output image of a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-encode-operations"> video encode operation</seealso>. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.VideoEncodeDstKhr">VkImageUsageFlags.VideoEncodeDstKhr</see> usage bit enabled.
	/// </summary>
	VideoEncodeDstKhr = 1000299000,
	/// <summary>
	/// <b>Must</b> only be used as a encode source image of a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-encode-operations"> video encode operation</seealso>. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.VideoEncodeSrcKhr">VkImageUsageFlags.VideoEncodeSrcKhr</see> usage bit enabled.
	/// </summary>
	VideoEncodeSrcKhr = 1000299001,
	/// <summary>
	/// <b>Must</b> only be used as a encode source or destination image of a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-encode-operations"> video encode operation</seealso>. This layout is valid only for image subresources of images created with the <see cref="VkImageUsageFlags.VideoEncodeDpbKhr">VkImageUsageFlags.VideoEncodeDpbKhr</see> usage bit enabled.
	/// </summary>
	VideoEncodeDpbKhr = 1000299002,
	/// <summary>
	/// Specifies a layout allowing read only access as an attachment, or in shaders as a sampled image, combined image/sampler, or input attachment.
	/// </summary>
	ReadOnlyOptimalKhr = 1000314000,
	/// <summary>
	/// Specifies a layout that <b>must</b> only be used with attachment accesses in the graphics pipeline.
	/// </summary>
	AttachmentOptimalKhr = 1000314001,
}

public enum VkAttachmentLoadOp
{
	Load = 0,
	Clear = 1,
	DontCare = 2,
	NoneExt = 1000400000,
}

public enum VkAttachmentStoreOp
{
	Store = 0,
	DontCare = 1,
	NoneKhr = 1000044000,
	NoneQcom = 0,
	NoneExt = 0,
}

public enum VkImageType
{
	Type1d = 0,
	Type2d = 1,
	Type3d = 2,
}

public enum VkImageTiling
{
	/// <summary>
	/// Specifies optimal tiling (texels are laid out in an implementation-dependent arrangement, for more efficient memory access).
	/// </summary>
	Optimal = 0,
	/// <summary>
	/// Specifies linear tiling (texels are laid out in memory in row-major order, possibly with some padding on each row).
	/// </summary>
	Linear = 1,
	/// <summary>
	/// Indicates that the image's tiling is defined by a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#glossary-drm-format-modifier">Linux DRM format modifier</seealso>. The modifier is specified at image creation with slink:VkImageDrmFormatModifierListCreateInfoEXT or slink:VkImageDrmFormatModifierExplicitCreateInfoEXT, and <b>can</b> be queried with flink:vkGetImageDrmFormatModifierPropertiesEXT.
	/// </summary>
	DrmFormatModifierExt = 1000158000,
}

public enum VkImageViewType
{
	Type1d = 0,
	Type2d = 1,
	Type3d = 2,
	TypeCube = 3,
	Type1dArray = 4,
	Type2dArray = 5,
	TypeCubeArray = 6,
}

public enum VkCommandBufferLevel
{
	/// <summary>
	/// Specifies a primary command buffer.
	/// </summary>
	Primary = 0,
	/// <summary>
	/// Specifies a secondary command buffer.
	/// </summary>
	Secondary = 1,
}

public enum VkComponentSwizzle
{
	/// <summary>
	/// Specifies that the component is set to the identity swizzle.
	/// </summary>
	Identity = 0,
	/// <summary>
	/// Specifies that the component is set to zero.
	/// </summary>
	Zero = 1,
	/// <summary>
	/// Specifies that the component is set to
	/// </summary>
	One = 2,
	/// <summary>
	/// Specifies that the component is set to the value of the R component of the image.
	/// </summary>
	R = 3,
	/// <summary>
	/// Specifies that the component is set to the value of the G component of the image.
	/// </summary>
	G = 4,
	/// <summary>
	/// Specifies that the component is set to the value of the B component of the image.
	/// </summary>
	B = 5,
	/// <summary>
	/// Specifies that the component is set to the value of the A component of the image.
	/// </summary>
	A = 6,
}

public enum VkDescriptorType
{
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-sampler"> sampler descriptor</seealso>.
	/// </summary>
	Sampler = 0,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-combinedimagesampler"> combined image sampler descriptor</seealso>.
	/// </summary>
	CombinedImageSampler = 1,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-sampledimage"> sampled image descriptor</seealso>.
	/// </summary>
	SampledImage = 2,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-storageimage"> storage image descriptor</seealso>.
	/// </summary>
	StorageImage = 3,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-uniformtexelbuffer"> uniform texel buffer descriptor</seealso>.
	/// </summary>
	UniformTexelBuffer = 4,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-storagetexelbuffer"> storage texel buffer descriptor</seealso>.
	/// </summary>
	StorageTexelBuffer = 5,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-uniformbuffer"> uniform buffer descriptor</seealso>.
	/// </summary>
	UniformBuffer = 6,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-storagebuffer"> storage buffer descriptor</seealso>.
	/// </summary>
	StorageBuffer = 7,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-uniformbufferdynamic"> dynamic uniform buffer descriptor</seealso>.
	/// </summary>
	UniformBufferDynamic = 8,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-storagebufferdynamic"> dynamic storage buffer descriptor</seealso>.
	/// </summary>
	StorageBufferDynamic = 9,
	/// <summary>
	/// Specifies an <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-inputattachment"> input attachment descriptor</seealso>.
	/// </summary>
	InputAttachment = 10,
	/// <summary>
	/// Specifies an <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-inlineuniformblock"> inline uniform block</seealso>.
	/// </summary>
	InlineUniformBlockExt = 1000138000,
	AccelerationStructureKhr = 1000150000,
	AccelerationStructure = 1000165000,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#descriptorsets-mutable"> descriptor of mutable type</seealso>.
	/// </summary>
	MutableValve = 1000351000,
}

public enum VkQueryType
{
	/// <summary>
	/// Specifies an <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-occlusion"> occlusion query</seealso>.
	/// </summary>
	Occlusion = 0,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-pipestats"> pipeline statistics query</seealso>.
	/// </summary>
	PipelineStatistics = 1,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-timestamps"> timestamp query</seealso>.
	/// </summary>
	Timestamp = 2,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-result-status-only"> result status query</seealso>.
	/// </summary>
	ResultStatusOnlyKhr = 1000023000,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-transform-feedback"> transform feedback query</seealso>.
	/// </summary>
	TransformFeedbackStreamExt = 1000028004,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-performance"> performance query</seealso>.
	/// </summary>
	PerformanceQueryKhr = 1000116000,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#acceleration-structure-copying"> acceleration structure size query</seealso> for use with flink:vkCmdWriteAccelerationStructuresPropertiesKHR or flink:vkWriteAccelerationStructuresPropertiesKHR.
	/// </summary>
	AccelerationStructureCompactedSizeKhr = 1000150000,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#acceleration-structure-copying"> serialization acceleration structure size query</seealso>
	/// </summary>
	AccelerationStructureSerializationSizeKhr = 1000150001,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#acceleration-structure-copying"> acceleration structure size query</seealso> for use with flink:vkCmdWriteAccelerationStructuresPropertiesNV.
	/// </summary>
	AccelerationStructureCompactedSize = 1000165000,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-performance-intel"> Intel performance query</seealso>.
	/// </summary>
	PerformanceQueryIntel = 1000210000,
	/// <summary>
	/// Specifies a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-video-encode-bitstream-buffer-range"> video encode bitstream range query</seealso>.
	/// </summary>
	VideoEncodestreamBufferRangeKhr = 1000299000,
}

public enum VkBorderColor
{
	/// <summary>
	/// Specifies a transparent, floating-point format, black color.
	/// </summary>
	FloatTransparentBlack = 0,
	/// <summary>
	/// Specifies a transparent, integer format, black color.
	/// </summary>
	IntTransparentBlack = 1,
	/// <summary>
	/// Specifies an opaque, floating-point format, black color.
	/// </summary>
	FloatOpaqueBlack = 2,
	/// <summary>
	/// Specifies an opaque, integer format, black color.
	/// </summary>
	IntOpaqueBlack = 3,
	/// <summary>
	/// Specifies an opaque, floating-point format, white color.
	/// </summary>
	FloatOpaqueWhite = 4,
	/// <summary>
	/// Specifies an opaque, integer format, white color.
	/// </summary>
	IntOpaqueWhite = 5,
	/// <summary>
	/// Indicates that a slink:VkSamplerCustomBorderColorCreateInfoEXT structure is included in the slink:VkSamplerCreateInfo::pname:pNext chain containing the color data in floating-point format.
	/// </summary>
	FloatCustomExt = 1000287003,
	/// <summary>
	/// Indicates that a slink:VkSamplerCustomBorderColorCreateInfoEXT structure is included in the slink:VkSamplerCreateInfo::pname:pNext chain containing the color data in integer format.
	/// </summary>
	IntCustomExt = 1000287004,
}

public enum VkPipelineBindPoint
{
	/// <summary>
	/// Specifies binding as a graphics pipeline.
	/// </summary>
	Graphics = 0,
	/// <summary>
	/// Specifies binding as a compute pipeline.
	/// </summary>
	Compute = 1,
	/// <summary>
	/// Specifies binding as a ray tracing pipeline.
	/// </summary>
	RayTracingKhr = 1000347000,
	RayTracing = 0,
	/// <summary>
	/// Specifies binding as a subpass shading pipeline.
	/// </summary>
	SubpassShadingHuawei = 1000369003,
}

public enum VkPipelineCacheHeaderVersion
{
	One = 1,
}

[Flags]
public enum VkPipelineCacheCreateFlags
{
	Reserved1Ext = 2,
	/// <summary>
	/// Specifies that all commands that modify the created slink:VkPipelineCache will be <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#fundamentals-threadingbehavior">externally synchronized</seealso>. When set, the implementation <b>may</b> skip any unnecessary processing needed to support simultaneous modification from multiple threads where allowed.--
	/// </summary>
	ExternallySynchronizedExt = 1,
	Reserved1Khr = 0,
	Reserved2Khr = 4,
}

public enum VkPrimitiveTopology
{
	PointList = 0,
	LineList = 1,
	LineStrip = 2,
	TriangleList = 3,
	TriangleStrip = 4,
	TriangleFan = 5,
	LineListWithAdjacency = 6,
	LineStripWithAdjacency = 7,
	TriangleListWithAdjacency = 8,
	TriangleStripWithAdjacency = 9,
	PatchList = 10,
}

public enum VkSharingMode
{
	/// <summary>
	/// Specifies that access to any range or image subresource of the object will be exclusive to a single queue family at a time.
	/// </summary>
	Exclusive = 0,
	/// <summary>
	/// Specifies that concurrent access to any range or image subresource of the object from multiple queue families is supported.
	/// </summary>
	Concurrent = 1,
}

public enum VkIndexType
{
	UInt16 = 0,
	UInt32 = 1,
	NoneKhr = 1000150000,
	None = 0,
	UInt8Ext = 1000265000,
}

public enum VkFilter
{
	/// <summary>
	/// Specifies nearest filtering.
	/// </summary>
	Nearest = 0,
	/// <summary>
	/// Specifies linear filtering.
	/// </summary>
	Linear = 1,
	CubicImg = 1000015000,
	/// <summary>
	/// Specifies cubic filtering.
	/// </summary>
	CubicExt = 0,
}

public enum VkSamplerMipmapMode
{
	/// <summary>
	/// Specifies nearest filtering.
	/// </summary>
	Nearest = 0,
	/// <summary>
	/// Specifies linear filtering.
	/// </summary>
	Linear = 1,
}

public enum VkSamplerAddressMode
{
	/// <summary>
	/// Specifies that the repeat wrap mode will be used.
	/// </summary>
	Repeat = 0,
	/// <summary>
	/// Specifies that the mirrored repeat wrap mode will be used.
	/// </summary>
	MirroredRepeat = 1,
	/// <summary>
	/// Specifies that the clamp to edge wrap mode will be used.
	/// </summary>
	ClampToEdge = 2,
	/// <summary>
	/// Specifies that the clamp to border wrap mode will be used.
	/// </summary>
	ClampToBorder = 3,
	/// <summary>
	/// Specifies that the mirror clamp to edge wrap mode will be used. This is only valid if
	/// </summary>
	MirrorClampToEdge = 4,
	/// <summary>
	/// Alias introduced for consistency with extension suffixing rules
	/// </summary>
	MirrorClampToEdgeKhr = 0,
}

public enum VkCompareOp
{
	/// <summary>
	/// Specifies that the test evaluates to false.
	/// </summary>
	Never = 0,
	Less = 1,
	Equal = 2,
	/// <summary>
	/// Specifies that the test evaluates
	/// </summary>
	LessOrEqual = 3,
	Greater = 4,
	NotEqual = 5,
	/// <summary>
	/// Specifies that the test evaluates
	/// </summary>
	GreaterOrEqual = 6,
	/// <summary>
	/// Specifies that the test evaluates to true.
	/// </summary>
	Always = 7,
}

public enum VkPolygonMode
{
	Fill = 0,
	Line = 1,
	Point = 2,
	FillRectangle = 1000153000,
}

public enum VkFrontFace
{
	CounterClockwise = 0,
	Clockwise = 1,
}

public enum VkBlendFactor
{
	Zero = 0,
	One = 1,
	SrcColor = 2,
	OneMinusSrcColor = 3,
	DstColor = 4,
	OneMinusDstColor = 5,
	SrcAlpha = 6,
	OneMinusSrcAlpha = 7,
	DstAlpha = 8,
	OneMinusDstAlpha = 9,
	ConstantColor = 10,
	OneMinusConstantColor = 11,
	ConstantAlpha = 12,
	OneMinusConstantAlpha = 13,
	SrcAlphaSaturate = 14,
	Src1Color = 15,
	OneMinusSrc1Color = 16,
	Src1Alpha = 17,
	OneMinusSrc1Alpha = 18,
}

public enum VkBlendOp
{
	Add = 0,
	Subtract = 1,
	ReverseSubtract = 2,
	Min = 3,
	Max = 4,
	ZeroExt = 1000148000,
	SrcExt = 1000148001,
	DstExt = 1000148002,
	SrcOverExt = 1000148003,
	DstOverExt = 1000148004,
	SrcInExt = 1000148005,
	DstInExt = 1000148006,
	SrcOutExt = 1000148007,
	DstOutExt = 1000148008,
	SrcAtopExt = 1000148009,
	DstAtopExt = 1000148010,
	XorExt = 1000148011,
	MultiplyExt = 1000148012,
	ScreenExt = 1000148013,
	OverlayExt = 1000148014,
	DarkenExt = 1000148015,
	LightenExt = 1000148016,
	ColordodgeExt = 1000148017,
	ColorburnExt = 1000148018,
	HardlightExt = 1000148019,
	SoftlightExt = 1000148020,
	DifferenceExt = 1000148021,
	ExclusionExt = 1000148022,
	InvertExt = 1000148023,
	InvertRgbExt = 1000148024,
	LineardodgeExt = 1000148025,
	LinearburnExt = 1000148026,
	VividlightExt = 1000148027,
	LinearlightExt = 1000148028,
	PinlightExt = 1000148029,
	HardmixExt = 1000148030,
	HslHueExt = 1000148031,
	HslSaturationExt = 1000148032,
	HslColorExt = 1000148033,
	HslLuminosityExt = 1000148034,
	PlusExt = 1000148035,
	PlusClampedExt = 1000148036,
	PlusClampedAlphaExt = 1000148037,
	PlusDarkerExt = 1000148038,
	MinusExt = 1000148039,
	MinusClampedExt = 1000148040,
	ContrastExt = 1000148041,
	InvertOvgExt = 1000148042,
	RedExt = 1000148043,
	GreenExt = 1000148044,
	BlueExt = 1000148045,
}

public enum VkStencilOp
{
	/// <summary>
	/// Keeps the current value.
	/// </summary>
	Keep = 0,
	Zero = 1,
	/// <summary>
	/// Sets the value to pname:reference.
	/// </summary>
	Replace = 2,
	/// <summary>
	/// Increments the current value and clamps to the maximum representable unsigned value.
	/// </summary>
	IncrementAndClamp = 3,
	/// <summary>
	/// Decrements the current value and
	/// </summary>
	DecrementAndClamp = 4,
	/// <summary>
	/// Bitwise-inverts the current value.
	/// </summary>
	Invert = 5,
	/// <summary>
	/// Increments the current value and
	/// </summary>
	IncrementAndWrap = 6,
	/// <summary>
	/// Decrements the current value and
	/// </summary>
	DecrementAndWrap = 7,
}

public enum VkLogicOp
{
	Clear = 0,
	And = 1,
	AndReverse = 2,
	Copy = 3,
	AndInverted = 4,
	NoOp = 5,
	Xor = 6,
	Or = 7,
	Nor = 8,
	Equivalent = 9,
	Invert = 10,
	OrReverse = 11,
	CopyInverted = 12,
	OrInverted = 13,
	Nand = 14,
	Set = 15,
}

public enum VkInternalAllocationType
{
	Executable = 0,
}

public enum VkSystemAllocationScope
{
	Command = 0,
	Object = 1,
	Cache = 2,
	Device = 3,
	Instance = 4,
}

public enum VkPhysicalDeviceType
{
	Other = 0,
	IntegratedGpu = 1,
	DiscreteGpu = 2,
	VirtualGpu = 3,
	Cpu = 4,
}

public enum VkVertexInputRate
{
	Vertex = 0,
	Instance = 1,
}

public enum VkFormat
{
	Undefined = 0,
	R4g4UNormPack8 = 1,
	R4g4b4a4UNormPack16 = 2,
	B4g4r4a4UNormPack16 = 3,
	R5g6b5UNormPack16 = 4,
	B5g6r5UNormPack16 = 5,
	R5g5b5a1UNormPack16 = 6,
	B5g5r5a1UNormPack16 = 7,
	A1r5g5b5UNormPack16 = 8,
	R8UNorm = 9,
	R8SNorm = 10,
	R8UScaled = 11,
	R8SScaled = 12,
	R8UInt = 13,
	R8SInt = 14,
	R8SRgb = 15,
	R8g8UNorm = 16,
	R8g8SNorm = 17,
	R8g8UScaled = 18,
	R8g8SScaled = 19,
	R8g8UInt = 20,
	R8g8SInt = 21,
	R8g8SRgb = 22,
	R8g8b8UNorm = 23,
	R8g8b8SNorm = 24,
	R8g8b8UScaled = 25,
	R8g8b8SScaled = 26,
	R8g8b8UInt = 27,
	R8g8b8SInt = 28,
	R8g8b8SRgb = 29,
	B8g8r8UNorm = 30,
	B8g8r8SNorm = 31,
	B8g8r8UScaled = 32,
	B8g8r8SScaled = 33,
	B8g8r8UInt = 34,
	B8g8r8SInt = 35,
	B8g8r8SRgb = 36,
	R8g8b8a8UNorm = 37,
	R8g8b8a8SNorm = 38,
	R8g8b8a8UScaled = 39,
	R8g8b8a8SScaled = 40,
	R8g8b8a8UInt = 41,
	R8g8b8a8SInt = 42,
	R8g8b8a8SRgb = 43,
	B8g8r8a8UNorm = 44,
	B8g8r8a8SNorm = 45,
	B8g8r8a8UScaled = 46,
	B8g8r8a8SScaled = 47,
	B8g8r8a8UInt = 48,
	B8g8r8a8SInt = 49,
	B8g8r8a8SRgb = 50,
	A8b8g8r8UNormPack32 = 51,
	A8b8g8r8SNormPack32 = 52,
	A8b8g8r8UScaledPack32 = 53,
	A8b8g8r8SScaledPack32 = 54,
	A8b8g8r8UIntPack32 = 55,
	A8b8g8r8SIntPack32 = 56,
	A8b8g8r8SRgbPack32 = 57,
	A2r10g10b10UNormPack32 = 58,
	A2r10g10b10SNormPack32 = 59,
	A2r10g10b10UScaledPack32 = 60,
	A2r10g10b10SScaledPack32 = 61,
	A2r10g10b10UIntPack32 = 62,
	A2r10g10b10SIntPack32 = 63,
	A2b10g10r10UNormPack32 = 64,
	A2b10g10r10SNormPack32 = 65,
	A2b10g10r10UScaledPack32 = 66,
	A2b10g10r10SScaledPack32 = 67,
	A2b10g10r10UIntPack32 = 68,
	A2b10g10r10SIntPack32 = 69,
	R16UNorm = 70,
	R16SNorm = 71,
	R16UScaled = 72,
	R16SScaled = 73,
	R16UInt = 74,
	R16SInt = 75,
	R16SFloat = 76,
	R16g16UNorm = 77,
	R16g16SNorm = 78,
	R16g16UScaled = 79,
	R16g16SScaled = 80,
	R16g16UInt = 81,
	R16g16SInt = 82,
	R16g16SFloat = 83,
	R16g16b16UNorm = 84,
	R16g16b16SNorm = 85,
	R16g16b16UScaled = 86,
	R16g16b16SScaled = 87,
	R16g16b16UInt = 88,
	R16g16b16SInt = 89,
	R16g16b16SFloat = 90,
	R16g16b16a16UNorm = 91,
	R16g16b16a16SNorm = 92,
	R16g16b16a16UScaled = 93,
	R16g16b16a16SScaled = 94,
	R16g16b16a16UInt = 95,
	R16g16b16a16SInt = 96,
	R16g16b16a16SFloat = 97,
	R32UInt = 98,
	R32SInt = 99,
	R32SFloat = 100,
	R32g32UInt = 101,
	R32g32SInt = 102,
	R32g32SFloat = 103,
	R32g32b32UInt = 104,
	R32g32b32SInt = 105,
	R32g32b32SFloat = 106,
	R32g32b32a32UInt = 107,
	R32g32b32a32SInt = 108,
	R32g32b32a32SFloat = 109,
	R64UInt = 110,
	R64SInt = 111,
	R64SFloat = 112,
	R64g64UInt = 113,
	R64g64SInt = 114,
	R64g64SFloat = 115,
	R64g64b64UInt = 116,
	R64g64b64SInt = 117,
	R64g64b64SFloat = 118,
	R64g64b64a64UInt = 119,
	R64g64b64a64SInt = 120,
	R64g64b64a64SFloat = 121,
	B10g11r11UFloatPack32 = 122,
	E5b9g9r9UFloatPack32 = 123,
	D16UNorm = 124,
	X8D24UNormPack32 = 125,
	D32SFloat = 126,
	S8UInt = 127,
	D16UNormS8UInt = 128,
	D24UNormS8UInt = 129,
	D32SFloatS8UInt = 130,
	Bc1RgbUNormBlock = 131,
	Bc1RgbSRgbBlock = 132,
	Bc1RgbaUNormBlock = 133,
	Bc1RgbaSRgbBlock = 134,
	Bc2UNormBlock = 135,
	Bc2SRgbBlock = 136,
	Bc3UNormBlock = 137,
	Bc3SRgbBlock = 138,
	Bc4UNormBlock = 139,
	Bc4SNormBlock = 140,
	Bc5UNormBlock = 141,
	Bc5SNormBlock = 142,
	Bc6hUFloatBlock = 143,
	Bc6hSFloatBlock = 144,
	Bc7UNormBlock = 145,
	Bc7SRgbBlock = 146,
	Etc2R8g8b8UNormBlock = 147,
	Etc2R8g8b8SRgbBlock = 148,
	Etc2R8g8b8a1UNormBlock = 149,
	Etc2R8g8b8a1SRgbBlock = 150,
	Etc2R8g8b8a8UNormBlock = 151,
	Etc2R8g8b8a8SRgbBlock = 152,
	EacR11UNormBlock = 153,
	EacR11SNormBlock = 154,
	EacR11g11UNormBlock = 155,
	EacR11g11SNormBlock = 156,
	Astc4x4UNormBlock = 157,
	Astc4x4SRgbBlock = 158,
	Astc5x4UNormBlock = 159,
	Astc5x4SRgbBlock = 160,
	Astc5x5UNormBlock = 161,
	Astc5x5SRgbBlock = 162,
	Astc6x5UNormBlock = 163,
	Astc6x5SRgbBlock = 164,
	Astc6x6UNormBlock = 165,
	Astc6x6SRgbBlock = 166,
	Astc8x5UNormBlock = 167,
	Astc8x5SRgbBlock = 168,
	Astc8x6UNormBlock = 169,
	Astc8x6SRgbBlock = 170,
	Astc8x8UNormBlock = 171,
	Astc8x8SRgbBlock = 172,
	Astc10x5UNormBlock = 173,
	Astc10x5SRgbBlock = 174,
	Astc10x6UNormBlock = 175,
	Astc10x6SRgbBlock = 176,
	Astc10x8UNormBlock = 177,
	Astc10x8SRgbBlock = 178,
	Astc10x10UNormBlock = 179,
	Astc10x10SRgbBlock = 180,
	Astc12x10UNormBlock = 181,
	Astc12x10SRgbBlock = 182,
	Astc12x12UNormBlock = 183,
	Astc12x12SRgbBlock = 184,
	Pvrtc12bppUNormBlockImg = 1000054000,
	Pvrtc14bppUNormBlockImg = 1000054001,
	Pvrtc22bppUNormBlockImg = 1000054002,
	Pvrtc24bppUNormBlockImg = 1000054003,
	Pvrtc12bppSRgbBlockImg = 1000054004,
	Pvrtc14bppSRgbBlockImg = 1000054005,
	Pvrtc22bppSRgbBlockImg = 1000054006,
	Pvrtc24bppSRgbBlockImg = 1000054007,
	Astc4x4SFloatBlockExt = 1000066000,
	Astc5x4SFloatBlockExt = 1000066001,
	Astc5x5SFloatBlockExt = 1000066002,
	Astc6x5SFloatBlockExt = 1000066003,
	Astc6x6SFloatBlockExt = 1000066004,
	Astc8x5SFloatBlockExt = 1000066005,
	Astc8x6SFloatBlockExt = 1000066006,
	Astc8x8SFloatBlockExt = 1000066007,
	Astc10x5SFloatBlockExt = 1000066008,
	Astc10x6SFloatBlockExt = 1000066009,
	Astc10x8SFloatBlockExt = 1000066010,
	Astc10x10SFloatBlockExt = 1000066011,
	Astc12x10SFloatBlockExt = 1000066012,
	Astc12x12SFloatBlockExt = 1000066013,
	G8b8g8r8422UNormKhr = 0,
	B8g8r8g8422UNormKhr = 0,
	G8B8R83plane420UNormKhr = 0,
	G8B8r82plane420UNormKhr = 0,
	G8B8R83plane422UNormKhr = 0,
	G8B8r82plane422UNormKhr = 0,
	G8B8R83plane444UNormKhr = 0,
	R10x6UNormPack16Khr = 0,
	R10x6g10x6UNorm2pack16Khr = 0,
	R10x6g10x6b10x6a10x6UNorm4pack16Khr = 0,
	G10x6b10x6g10x6r10x6422UNorm4pack16Khr = 0,
	B10x6g10x6r10x6g10x6422UNorm4pack16Khr = 0,
	G10x6B10x6R10x63plane420UNorm3pack16Khr = 0,
	G10x6B10x6r10x62plane420UNorm3pack16Khr = 0,
	G10x6B10x6R10x63plane422UNorm3pack16Khr = 0,
	G10x6B10x6r10x62plane422UNorm3pack16Khr = 0,
	G10x6B10x6R10x63plane444UNorm3pack16Khr = 0,
	R12x4UNormPack16Khr = 0,
	R12x4g12x4UNorm2pack16Khr = 0,
	R12x4g12x4b12x4a12x4UNorm4pack16Khr = 0,
	G12x4b12x4g12x4r12x4422UNorm4pack16Khr = 0,
	B12x4g12x4r12x4g12x4422UNorm4pack16Khr = 0,
	G12x4B12x4R12x43plane420UNorm3pack16Khr = 0,
	G12x4B12x4r12x42plane420UNorm3pack16Khr = 0,
	G12x4B12x4R12x43plane422UNorm3pack16Khr = 0,
	G12x4B12x4r12x42plane422UNorm3pack16Khr = 0,
	G12x4B12x4R12x43plane444UNorm3pack16Khr = 0,
	G16b16g16r16422UNormKhr = 0,
	B16g16r16g16422UNormKhr = 0,
	G16B16R163plane420UNormKhr = 0,
	G16B16r162plane420UNormKhr = 0,
	G16B16R163plane422UNormKhr = 0,
	G16B16r162plane422UNormKhr = 0,
	G16B16R163plane444UNormKhr = 0,
	Astc3x3x3UNormBlockExt = 1000288000,
	Astc3x3x3SRgbBlockExt = 1000288001,
	Astc3x3x3SFloatBlockExt = 1000288002,
	Astc4x3x3UNormBlockExt = 1000288003,
	Astc4x3x3SRgbBlockExt = 1000288004,
	Astc4x3x3SFloatBlockExt = 1000288005,
	Astc4x4x3UNormBlockExt = 1000288006,
	Astc4x4x3SRgbBlockExt = 1000288007,
	Astc4x4x3SFloatBlockExt = 1000288008,
	Astc4x4x4UNormBlockExt = 1000288009,
	Astc4x4x4SRgbBlockExt = 1000288010,
	Astc4x4x4SFloatBlockExt = 1000288011,
	Astc5x4x4UNormBlockExt = 1000288012,
	Astc5x4x4SRgbBlockExt = 1000288013,
	Astc5x4x4SFloatBlockExt = 1000288014,
	Astc5x5x4UNormBlockExt = 1000288015,
	Astc5x5x4SRgbBlockExt = 1000288016,
	Astc5x5x4SFloatBlockExt = 1000288017,
	Astc5x5x5UNormBlockExt = 1000288018,
	Astc5x5x5SRgbBlockExt = 1000288019,
	Astc5x5x5SFloatBlockExt = 1000288020,
	Astc6x5x5UNormBlockExt = 1000288021,
	Astc6x5x5SRgbBlockExt = 1000288022,
	Astc6x5x5SFloatBlockExt = 1000288023,
	Astc6x6x5UNormBlockExt = 1000288024,
	Astc6x6x5SRgbBlockExt = 1000288025,
	Astc6x6x5SFloatBlockExt = 1000288026,
	Astc6x6x6UNormBlockExt = 1000288027,
	Astc6x6x6SRgbBlockExt = 1000288028,
	Astc6x6x6SFloatBlockExt = 1000288029,
	G8B8r82plane444UNormExt = 1000330000,
	G10x6B10x6r10x62plane444UNorm3pack16Ext = 1000330001,
	G12x4B12x4r12x42plane444UNorm3pack16Ext = 1000330002,
	G16B16r162plane444UNormExt = 1000330003,
	A4r4g4b4UNormPack16Ext = 1000340000,
	A4b4g4r4UNormPack16Ext = 1000340001,
}

public enum VkStructureType
{
	ApplicationInfo = 0,
	InstanceCreateInfo = 1,
	DeviceQueueCreateInfo = 2,
	DeviceCreateInfo = 3,
	SubmitInfo = 4,
	MemoryAllocateInfo = 5,
	MappedMemoryRange = 6,
	BindSparseInfo = 7,
	FenceCreateInfo = 8,
	SemaphoreCreateInfo = 9,
	EventCreateInfo = 10,
	QueryPoolCreateInfo = 11,
	BufferCreateInfo = 12,
	BufferViewCreateInfo = 13,
	ImageCreateInfo = 14,
	ImageViewCreateInfo = 15,
	ShaderModuleCreateInfo = 16,
	PipelineCacheCreateInfo = 17,
	PipelineShaderStageCreateInfo = 18,
	PipelineVertexInputStateCreateInfo = 19,
	PipelineInputAssemblyStateCreateInfo = 20,
	PipelineTessellationStateCreateInfo = 21,
	PipelineViewportStateCreateInfo = 22,
	PipelineRasterizationStateCreateInfo = 23,
	PipelineMultisampleStateCreateInfo = 24,
	PipelineDepthStencilStateCreateInfo = 25,
	PipelineColorBlendStateCreateInfo = 26,
	PipelineDynamicStateCreateInfo = 27,
	GraphicsPipelineCreateInfo = 28,
	ComputePipelineCreateInfo = 29,
	PipelineLayoutCreateInfo = 30,
	SamplerCreateInfo = 31,
	DescriptorSetLayoutCreateInfo = 32,
	DescriptorPoolCreateInfo = 33,
	DescriptorSetAllocateInfo = 34,
	WriteDescriptorSet = 35,
	CopyDescriptorSet = 36,
	FrameBufferCreateInfo = 37,
	RenderPassCreateInfo = 38,
	CommandPoolCreateInfo = 39,
	CommandBufferAllocateInfo = 40,
	CommandBufferInheritanceInfo = 41,
	CommandBufferBeginInfo = 42,
	RenderPassBeginInfo = 43,
	BufferMemoryBarrier = 44,
	ImageMemoryBarrier = 45,
	MemoryBarrier = 46,
	/// <summary>
	/// Reserved for internal use by the loader, layers, and ICDs
	/// </summary>
	LoaderInstanceCreateInfo = 47,
	/// <summary>
	/// Reserved for internal use by the loader, layers, and ICDs
	/// </summary>
	LoaderDeviceCreateInfo = 48,
	SwapchainCreateInfoKhr = 1000001000,
	PresentInfoKhr = 1000001001,
	DeviceGroupPresentCapabilitiesKhr = 1000001007,
	ImageSwapchainCreateInfoKhr = 1000001008,
	BindImageMemorySwapchainInfoKhr = 1000001009,
	AcquireNextImageInfoKhr = 1000001010,
	DeviceGroupPresentInfoKhr = 1000001011,
	DeviceGroupSwapchainCreateInfoKhr = 1000001012,
	DisplayModeCreateInfoKhr = 1000002000,
	DisplaySurfaceCreateInfoKhr = 1000002001,
	DisplayPresentInfoKhr = 1000003000,
	XlibSurfaceCreateInfoKhr = 1000004000,
	XcbSurfaceCreateInfoKhr = 1000005000,
	WaylandSurfaceCreateInfoKhr = 1000006000,
	AndroidSurfaceCreateInfoKhr = 1000008000,
	Win32SurfaceCreateInfoKhr = 1000009000,
	NativeBufferAndroid = 1000010000,
	SwapchainImageCreateInfoAndroid = 1000010001,
	PhysicalDevicePresentationPropertiesAndroid = 1000010002,
	DebugReportCallbackCreateInfoExt = 1000011000,
	/// <summary>
	/// Backwards-compatible alias containing a typo
	/// </summary>
	DebugReportCreateInfoExt = 0,
	PipelineRasterizationStateRasterizationOrderAmd = 1000018000,
	DebugMarkerObjectNameInfoExt = 1000022000,
	DebugMarkerObjectTagInfoExt = 1000022001,
	DebugMarkerMarkerInfoExt = 1000022002,
	VideoProfileKhr = 1000023000,
	VideoCapabilitiesKhr = 1000023001,
	VideoPictureResourceKhr = 1000023002,
	VideoGetMemoryPropertiesKhr = 1000023003,
	VideoBindMemoryKhr = 1000023004,
	VideoSessionCreateInfoKhr = 1000023005,
	VideoSessionParametersCreateInfoKhr = 1000023006,
	VideoSessionParametersUpdateInfoKhr = 1000023007,
	VideoBeginCodingInfoKhr = 1000023008,
	VideoEndCodingInfoKhr = 1000023009,
	VideoCodingControlInfoKhr = 1000023010,
	VideoReferenceSlotKhr = 1000023011,
	VideoQueueFamilyProperties2Khr = 1000023012,
	VideoProfilesKhr = 1000023013,
	PhysicalDeviceVideoFormatInfoKhr = 1000023014,
	VideoFormatPropertiesKhr = 1000023015,
	VideoDecodeInfoKhr = 1000024000,
	DedicatedAllocationImageCreateInfo = 1000026000,
	DedicatedAllocationBufferCreateInfo = 1000026001,
	DedicatedAllocationMemoryAllocateInfo = 1000026002,
	PhysicalDeviceTransformFeedbackFeaturesExt = 1000028000,
	PhysicalDeviceTransformFeedbackPropertiesExt = 1000028001,
	PipelineRasterizationStateStreamCreateInfoExt = 1000028002,
	CuModuleCreateInfox = 1000029000,
	CuFunctionCreateInfox = 1000029001,
	CuLaunchInfox = 1000029002,
	ImageViewHandleInfox = 1000030000,
	ImageViewAddressPropertiesx = 1000030001,
	VideoEncodeH264CapabilitiesExt = 1000038000,
	VideoEncodeH264SessionCreateInfoExt = 1000038001,
	VideoEncodeH264SessionParametersCreateInfoExt = 1000038002,
	VideoEncodeH264SessionParametersAddInfoExt = 1000038003,
	VideoEncodeH264VclFrameInfoExt = 1000038004,
	VideoEncodeH264DpbSlotInfoExt = 1000038005,
	VideoEncodeH264NaluSliceExt = 1000038006,
	VideoEncodeH264EmitPictureParametersExt = 1000038007,
	VideoEncodeH264ProfileExt = 1000038008,
	VideoEncodeH265CapabilitiesExt = 1000039000,
	VideoEncodeH265SessionCreateInfoExt = 1000039001,
	VideoEncodeH265SessionParametersCreateInfoExt = 1000039002,
	VideoEncodeH265SessionParametersAddInfoExt = 1000039003,
	VideoEncodeH265VclFrameInfoExt = 1000039004,
	VideoEncodeH265DpbSlotInfoExt = 1000039005,
	VideoEncodeH265NaluSliceExt = 1000039006,
	VideoEncodeH265EmitPictureParametersExt = 1000039007,
	VideoEncodeH265ProfileExt = 1000039008,
	VideoEncodeH265ReferenceListsExt = 1000039009,
	VideoDecodeH264CapabilitiesExt = 1000040000,
	VideoDecodeH264SessionCreateInfoExt = 1000040001,
	VideoDecodeH264PictureInfoExt = 1000040002,
	VideoDecodeH264MvcExt = 1000040003,
	VideoDecodeH264ProfileExt = 1000040004,
	VideoDecodeH264SessionParametersCreateInfoExt = 1000040005,
	VideoDecodeH264SessionParametersAddInfoExt = 1000040006,
	VideoDecodeH264DpbSlotInfoExt = 1000040007,
	TextureLodGatherFormatPropertiesAmd = 1000041000,
	RenderingInfoKhr = 1000044000,
	RenderingAttachmentInfoKhr = 1000044001,
	PipelineRenderingCreateInfoKhr = 1000044002,
	PhysicalDeviceDynamicRenderingFeaturesKhr = 1000044003,
	CommandBufferInheritanceRenderingInfoKhr = 1000044004,
	RenderingFragmentShadingRateAttachmentInfoKhr = 1000044006,
	RenderingFragmentDensityMapAttachmentInfoExt = 1000044007,
	AttachmentSampleCountInfoAmd = 1000044008,
	AttachmentSampleCountInfo = 0,
	MultiviewPerViewAttributesInfox = 1000044009,
	StreamDescriptorSurfaceCreateInfoGgp = 1000049000,
	PhysicalDeviceCornerSampledImageFeatures = 1000050000,
	RenderPassMultiviewCreateInfoKhr = 0,
	PhysicalDeviceMultiviewFeaturesKhr = 0,
	PhysicalDeviceMultiviewPropertiesKhr = 0,
	ExternalMemoryImageCreateInfo = 1000056000,
	ExportMemoryAllocateInfo = 1000056001,
	ImportMemoryWin32HandleInfo = 1000057000,
	ExportMemoryWin32HandleInfo = 1000057001,
	Win32KeyedMutexAcquireReleaseInfo = 1000058000,
	PhysicalDeviceFeatures2Khr = 0,
	PhysicalDeviceProperties2Khr = 0,
	FormatProperties2Khr = 0,
	ImageFormatProperties2Khr = 0,
	PhysicalDeviceImageFormatInfo2Khr = 0,
	QueueFamilyProperties2Khr = 0,
	PhysicalDeviceMemoryProperties2Khr = 0,
	SparseImageFormatProperties2Khr = 0,
	PhysicalDeviceSparseImageFormatInfo2Khr = 0,
	MemoryAllocateFlagsInfoKhr = 0,
	DeviceGroupRenderPassBeginInfoKhr = 0,
	DeviceGroupCommandBufferBeginInfoKhr = 0,
	DeviceGroupSubmitInfoKhr = 0,
	DeviceGroupBindSparseInfoKhr = 0,
	BindBufferMemoryDeviceGroupInfoKhr = 0,
	BindImageMemoryDeviceGroupInfoKhr = 0,
	ValidationFlagsExt = 1000061000,
	ViSurfaceCreateInfoNn = 1000062000,
	PhysicalDeviceTextureCompressionAstcHdrFeaturesExt = 1000066000,
	ImageViewAstcDecodeModeExt = 1000067000,
	PhysicalDeviceAstcDecodeFeaturesExt = 1000067001,
	PhysicalDeviceGroupPropertiesKhr = 0,
	DeviceGroupDeviceCreateInfoKhr = 0,
	PhysicalDeviceExternalImageFormatInfoKhr = 0,
	ExternalImageFormatPropertiesKhr = 0,
	PhysicalDeviceExternalBufferInfoKhr = 0,
	ExternalBufferPropertiesKhr = 0,
	PhysicalDeviceIdPropertiesKhr = 0,
	ExternalMemoryBufferCreateInfoKhr = 0,
	ExternalMemoryImageCreateInfoKhr = 0,
	ExportMemoryAllocateInfoKhr = 0,
	ImportMemoryWin32HandleInfoKhr = 1000073000,
	ExportMemoryWin32HandleInfoKhr = 1000073001,
	MemoryWin32HandlePropertiesKhr = 1000073002,
	MemoryGetWin32HandleInfoKhr = 1000073003,
	ImportMemoryFdInfoKhr = 1000074000,
	MemoryFdPropertiesKhr = 1000074001,
	MemoryGetFdInfoKhr = 1000074002,
	Win32KeyedMutexAcquireReleaseInfoKhr = 1000075000,
	PhysicalDeviceExternalSemaphoreInfoKhr = 0,
	ExternalSemaphorePropertiesKhr = 0,
	ExportSemaphoreCreateInfoKhr = 0,
	ImportSemaphoreWin32HandleInfoKhr = 1000078000,
	ExportSemaphoreWin32HandleInfoKhr = 1000078001,
	D3d12FenceSubmitInfoKhr = 1000078002,
	SemaphoreGetWin32HandleInfoKhr = 1000078003,
	ImportSemaphoreFdInfoKhr = 1000079000,
	SemaphoreGetFdInfoKhr = 1000079001,
	PhysicalDevicePushDescriptorPropertiesKhr = 1000080000,
	CommandBufferInheritanceConditionalRenderingInfoExt = 1000081000,
	PhysicalDeviceConditionalRenderingFeaturesExt = 1000081001,
	ConditionalRenderingBeginInfoExt = 1000081002,
	PhysicalDeviceShaderFloat16Int8FeaturesKhr = 0,
	PhysicalDeviceFloat16Int8FeaturesKhr = 0,
	PhysicalDevice16bitStorageFeaturesKhr = 0,
	PresentRegionsKhr = 1000084000,
	DescriptorUpdateTemplateCreateInfoKhr = 0,
	PipelineViewportWScalingStateCreateInfo = 1000087000,
	SurfaceCapabilities2Ext = 1000090000,
	DisplayPowerInfoExt = 1000091000,
	DeviceEventInfoExt = 1000091001,
	DisplayEventInfoExt = 1000091002,
	SwapchainCounterCreateInfoExt = 1000091003,
	PresentTimesInfoGoogle = 1000092000,
	PhysicalDeviceMultiviewPerViewAttributesPropertiesx = 1000097000,
	PipelineViewportSwizzleStateCreateInfo = 1000098000,
	PhysicalDeviceDiscardRectanglePropertiesExt = 1000099000,
	PipelineDiscardRectangleStateCreateInfoExt = 1000099001,
	PhysicalDeviceConservativeRasterizationPropertiesExt = 1000101000,
	PipelineRasterizationConservativeStateCreateInfoExt = 1000101001,
	PhysicalDeviceDepthClipEnableFeaturesExt = 1000102000,
	PipelineRasterizationDepthClipStateCreateInfoExt = 1000102001,
	HdrMetadataExt = 1000105000,
	PhysicalDeviceImagelessFrameBufferFeaturesKhr = 0,
	FrameBufferAttachmentsCreateInfoKhr = 0,
	FrameBufferAttachmentImageInfoKhr = 0,
	RenderPassAttachmentBeginInfoKhr = 0,
	AttachmentDescription2Khr = 0,
	AttachmentReference2Khr = 0,
	SubpassDescription2Khr = 0,
	SubpassDependency2Khr = 0,
	RenderPassCreateInfo2Khr = 0,
	SubpassBeginInfoKhr = 0,
	SubpassEndInfoKhr = 0,
	SharedPresentSurfaceCapabilitiesKhr = 1000111000,
	PhysicalDeviceExternalFenceInfoKhr = 0,
	ExternalFencePropertiesKhr = 0,
	ExportFenceCreateInfoKhr = 0,
	ImportFenceWin32HandleInfoKhr = 1000114000,
	ExportFenceWin32HandleInfoKhr = 1000114001,
	FenceGetWin32HandleInfoKhr = 1000114002,
	ImportFenceFdInfoKhr = 1000115000,
	FenceGetFdInfoKhr = 1000115001,
	PhysicalDevicePerformanceQueryFeaturesKhr = 1000116000,
	PhysicalDevicePerformanceQueryPropertiesKhr = 1000116001,
	QueryPoolPerformanceCreateInfoKhr = 1000116002,
	PerformanceQuerySubmitInfoKhr = 1000116003,
	AcquireProfilingLockInfoKhr = 1000116004,
	PerformanceCounterKhr = 1000116005,
	PerformanceCounterDescriptionKhr = 1000116006,
	PhysicalDevicePointClippingPropertiesKhr = 0,
	RenderPassInputAttachmentAspectCreateInfoKhr = 0,
	ImageViewUsageCreateInfoKhr = 0,
	PipelineTessellationDomainOriginStateCreateInfoKhr = 0,
	PhysicalDeviceSurfaceInfo2Khr = 1000119000,
	SurfaceCapabilities2Khr = 1000119001,
	SurfaceFormat2Khr = 1000119002,
	PhysicalDeviceVariablePointersFeaturesKhr = 0,
	PhysicalDeviceVariablePointerFeaturesKhr = 0,
	DisplayProperties2Khr = 1000121000,
	DisplayPlaneProperties2Khr = 1000121001,
	DisplayModeProperties2Khr = 1000121002,
	DisplayPlaneInfo2Khr = 1000121003,
	DisplayPlaneCapabilities2Khr = 1000121004,
	IosSurfaceCreateInfoMvk = 1000122000,
	MacosSurfaceCreateInfoMvk = 1000123000,
	MemoryDedicatedRequirementsKhr = 0,
	MemoryDedicatedAllocateInfoKhr = 0,
	DebugUtilsObjectNameInfoExt = 1000128000,
	DebugUtilsObjectTagInfoExt = 1000128001,
	DebugUtilsLabelExt = 1000128002,
	DebugUtilsMessengerCallbackDataExt = 1000128003,
	DebugUtilsMessengerCreateInfoExt = 1000128004,
	AndroidHardwareBufferUsageAndroid = 1000129000,
	AndroidHardwareBufferPropertiesAndroid = 1000129001,
	AndroidHardwareBufferFormatPropertiesAndroid = 1000129002,
	ImportAndroidHardwareBufferInfoAndroid = 1000129003,
	MemoryGetAndroidHardwareBufferInfoAndroid = 1000129004,
	ExternalFormatAndroid = 1000129005,
	AndroidHardwareBufferFormatProperties2Android = 1000129006,
	PhysicalDeviceSamplerFilterMinmaxPropertiesExt = 0,
	SamplerReductionModeCreateInfoExt = 0,
	PhysicalDeviceInlineUniformBlockFeaturesExt = 1000138000,
	PhysicalDeviceInlineUniformBlockPropertiesExt = 1000138001,
	WriteDescriptorSetInlineUniformBlockExt = 1000138002,
	DescriptorPoolInlineUniformBlockCreateInfoExt = 1000138003,
	SampleLocationsInfoExt = 1000143000,
	RenderPassSampleLocationsBeginInfoExt = 1000143001,
	PipelineSampleLocationsStateCreateInfoExt = 1000143002,
	PhysicalDeviceSampleLocationsPropertiesExt = 1000143003,
	MultisamplePropertiesExt = 1000143004,
	BufferMemoryRequirementsInfo2Khr = 0,
	ImageMemoryRequirementsInfo2Khr = 0,
	ImageSparseMemoryRequirementsInfo2Khr = 0,
	MemoryRequirements2Khr = 0,
	SparseImageMemoryRequirements2Khr = 0,
	ImageFormatListCreateInfoKhr = 0,
	PhysicalDeviceBlendOperationAdvancedFeaturesExt = 1000148000,
	PhysicalDeviceBlendOperationAdvancedPropertiesExt = 1000148001,
	PipelineColorBlendAdvancedStateCreateInfoExt = 1000148002,
	PipelineCoverageToColorStateCreateInfo = 1000149000,
	WriteDescriptorSetAccelerationStructureKhr = 1000150007,
	AccelerationStructureBuildGeometryInfoKhr = 1000150000,
	AccelerationStructureDeviceAddressInfoKhr = 1000150002,
	AccelerationStructureGeometryAabbsDataKhr = 1000150003,
	AccelerationStructureGeometryInstancesDataKhr = 1000150004,
	AccelerationStructureGeometryTrianglesDataKhr = 1000150005,
	AccelerationStructureGeometryKhr = 1000150006,
	AccelerationStructureVersionInfoKhr = 1000150009,
	CopyAccelerationStructureInfoKhr = 1000150010,
	CopyAccelerationStructureToMemoryInfoKhr = 1000150011,
	CopyMemoryToAccelerationStructureInfoKhr = 1000150012,
	PhysicalDeviceAccelerationStructureFeaturesKhr = 1000150013,
	PhysicalDeviceAccelerationStructurePropertiesKhr = 1000150014,
	AccelerationStructureCreateInfoKhr = 1000150017,
	AccelerationStructureBuildSizesInfoKhr = 1000150020,
	PhysicalDeviceRayTracingPipelineFeaturesKhr = 1000347000,
	PhysicalDeviceRayTracingPipelinePropertiesKhr = 1000347001,
	RayTracingPipelineCreateInfoKhr = 1000347015,
	RayTracingShaderGroupCreateInfoKhr = 1000347016,
	RayTracingPipelineInterfaceCreateInfoKhr = 1000347018,
	PhysicalDeviceRayQueryFeaturesKhr = 1000348013,
	PipelineCoverageModulationStateCreateInfo = 1000152000,
	PhysicalDeviceShaderSmBuiltinsFeatures = 1000154000,
	PhysicalDeviceShaderSmBuiltinsProperties = 1000154001,
	SamplerYcbcrConversionCreateInfoKhr = 0,
	SamplerYcbcrConversionInfoKhr = 0,
	BindImagePlaneMemoryInfoKhr = 0,
	ImagePlaneMemoryRequirementsInfoKhr = 0,
	PhysicalDeviceSamplerYcbcrConversionFeaturesKhr = 0,
	SamplerYcbcrConversionImageFormatPropertiesKhr = 0,
	BindBufferMemoryInfoKhr = 0,
	BindImageMemoryInfoKhr = 0,
	DrmFormatModifierPropertiesListExt = 1000158000,
	PhysicalDeviceImageDrmFormatModifierInfoExt = 1000158002,
	ImageDrmFormatModifierListCreateInfoExt = 1000158003,
	ImageDrmFormatModifierExplicitCreateInfoExt = 1000158004,
	ImageDrmFormatModifierPropertiesExt = 1000158005,
	DrmFormatModifierPropertiesList2Ext = 1000158006,
	ValidationCacheCreateInfoExt = 1000160000,
	ShaderModuleValidationCacheCreateInfoExt = 1000160001,
	DescriptorSetLayoutBindingFlagsCreateInfoExt = 0,
	PhysicalDeviceDescriptorIndexingFeaturesExt = 0,
	PhysicalDeviceDescriptorIndexingPropertiesExt = 0,
	DescriptorSetVariableDescriptorCountAllocateInfoExt = 0,
	DescriptorSetVariableDescriptorCountLayoutSupportExt = 0,
	PhysicalDevicePortabilitySubsetFeaturesKhr = 1000163000,
	PhysicalDevicePortabilitySubsetPropertiesKhr = 1000163001,
	PipelineViewportShadingRateImageStateCreateInfo = 1000164000,
	PhysicalDeviceShadingRateImageFeatures = 1000164001,
	PhysicalDeviceShadingRateImageProperties = 1000164002,
	PipelineViewportCoarseSampleOrderStateCreateInfo = 1000164005,
	RayTracingPipelineCreateInfo = 1000165000,
	AccelerationStructureCreateInfo = 1000165001,
	Geometry = 1000165003,
	GeometryTriangles = 1000165004,
	GeometryAabb = 1000165005,
	BindAccelerationStructureMemoryInfo = 1000165006,
	WriteDescriptorSetAccelerationStructure = 1000165007,
	AccelerationStructureMemoryRequirementsInfo = 1000165008,
	PhysicalDeviceRayTracingProperties = 1000165009,
	RayTracingShaderGroupCreateInfo = 1000165011,
	AccelerationStructureInfo = 1000165012,
	PhysicalDeviceRepresentativeFragmentTestFeatures = 1000166000,
	PipelineRepresentativeFragmentTestStateCreateInfo = 1000166001,
	PhysicalDeviceMaintenance3PropertiesKhr = 0,
	DescriptorSetLayoutSupportKhr = 0,
	PhysicalDeviceImageViewImageFormatInfoExt = 1000170000,
	FilterCubicImageViewImageFormatPropertiesExt = 1000170001,
	DeviceQueueGlobalPriorityCreateInfoExt = 1000174000,
	PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKhr = 0,
	PhysicalDevice8bitStorageFeaturesKhr = 0,
	ImportMemoryHostPointerInfoExt = 1000178000,
	MemoryHostPointerPropertiesExt = 1000178001,
	PhysicalDeviceExternalMemoryHostPropertiesExt = 1000178002,
	PhysicalDeviceShaderAtomicInt64FeaturesKhr = 0,
	PhysicalDeviceShaderClockFeaturesKhr = 1000181000,
	PipelineCompilerControlCreateInfoAmd = 1000183000,
	CalibratedTimestampInfoExt = 1000184000,
	PhysicalDeviceShaderCorePropertiesAmd = 1000185000,
	VideoDecodeH265CapabilitiesExt = 1000187000,
	VideoDecodeH265SessionCreateInfoExt = 1000187001,
	VideoDecodeH265SessionParametersCreateInfoExt = 1000187002,
	VideoDecodeH265SessionParametersAddInfoExt = 1000187003,
	VideoDecodeH265ProfileExt = 1000187004,
	VideoDecodeH265PictureInfoExt = 1000187005,
	VideoDecodeH265DpbSlotInfoExt = 1000187006,
	DeviceMemoryOverallocationCreateInfoAmd = 1000189000,
	PhysicalDeviceVertexAttributeDivisorPropertiesExt = 1000190000,
	PipelineVertexInputDivisorStateCreateInfoExt = 1000190001,
	PhysicalDeviceVertexAttributeDivisorFeaturesExt = 1000190002,
	PresentFrameTokenGgp = 1000191000,
	PipelineCreationFeedbackCreateInfoExt = 1000192000,
	PhysicalDeviceDriverPropertiesKhr = 0,
	PhysicalDeviceFloatControlsPropertiesKhr = 0,
	PhysicalDeviceDepthStencilResolvePropertiesKhr = 0,
	SubpassDescriptionDepthStencilResolveKhr = 0,
	PhysicalDeviceComputeShaderDerivativesFeatures = 1000201000,
	PhysicalDeviceMeshShaderFeatures = 1000202000,
	PhysicalDeviceMeshShaderProperties = 1000202001,
	PhysicalDeviceFragmentShaderBarycentricFeatures = 1000203000,
	PhysicalDeviceShaderImageFootprintFeatures = 1000204000,
	PipelineViewportExclusiveScissorStateCreateInfo = 1000205000,
	PhysicalDeviceExclusiveScissorFeatures = 1000205002,
	CheckpointData = 1000206000,
	QueueFamilyCheckpointProperties = 1000206001,
	PhysicalDeviceTimelineSemaphoreFeaturesKhr = 0,
	PhysicalDeviceTimelineSemaphorePropertiesKhr = 0,
	SemaphoreTypeCreateInfoKhr = 0,
	TimelineSemaphoreSubmitInfoKhr = 0,
	SemaphoreWaitInfoKhr = 0,
	SemaphoreSignalInfoKhr = 0,
	PhysicalDeviceShaderIntegerFunctions2FeaturesIntel = 1000209000,
	QueryPoolPerformanceQueryCreateInfoIntel = 1000210000,
	/// <summary>
	/// Backwards-compatible alias containing a typo
	/// </summary>
	QueryPoolCreateInfoIntel = 0,
	InitializePerformanceApiInfoIntel = 1000210001,
	PerformanceMarkerInfoIntel = 1000210002,
	PerformanceStreamMarkerInfoIntel = 1000210003,
	PerformanceOverrideInfoIntel = 1000210004,
	PerformanceConfigurationAcquireInfoIntel = 1000210005,
	PhysicalDeviceVulkanMemoryModelFeaturesKhr = 0,
	PhysicalDevicePciBusInfoPropertiesExt = 1000212000,
	DisplayNativeHdrSurfaceCapabilitiesAmd = 1000213000,
	SwapchainDisplayNativeHdrCreateInfoAmd = 1000213001,
	ImagepipeSurfaceCreateInfoFuchsia = 1000214000,
	PhysicalDeviceShaderTerminateInvocationFeaturesKhr = 1000215000,
	MetalSurfaceCreateInfoExt = 1000217000,
	PhysicalDeviceFragmentDensityMapFeaturesExt = 1000218000,
	PhysicalDeviceFragmentDensityMapPropertiesExt = 1000218001,
	RenderPassFragmentDensityMapCreateInfoExt = 1000218002,
	PhysicalDeviceScalarBlockLayoutFeaturesExt = 0,
	PhysicalDeviceSubgroupSizeControlPropertiesExt = 1000225000,
	PipelineShaderStageRequiredSubgroupSizeCreateInfoExt = 1000225001,
	PhysicalDeviceSubgroupSizeControlFeaturesExt = 1000225002,
	FragmentShadingRateAttachmentInfoKhr = 1000226000,
	PipelineFragmentShadingRateStateCreateInfoKhr = 1000226001,
	PhysicalDeviceFragmentShadingRatePropertiesKhr = 1000226002,
	PhysicalDeviceFragmentShadingRateFeaturesKhr = 1000226003,
	PhysicalDeviceFragmentShadingRateKhr = 1000226004,
	PhysicalDeviceShaderCoreProperties2Amd = 1000227000,
	PhysicalDeviceCoherentMemoryFeaturesAmd = 1000229000,
	PhysicalDeviceShaderImageAtomicInt64FeaturesExt = 1000234000,
	PhysicalDeviceMemoryBudgetPropertiesExt = 1000237000,
	PhysicalDeviceMemoryPriorityFeaturesExt = 1000238000,
	MemoryPriorityAllocateInfoExt = 1000238001,
	SurfaceProtectedCapabilitiesKhr = 1000239000,
	PhysicalDeviceDedicatedAllocationImageAliasingFeatures = 1000240000,
	PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKhr = 0,
	AttachmentReferenceStencilLayoutKhr = 0,
	AttachmentDescriptionStencilLayoutKhr = 0,
	PhysicalDeviceBufferDeviceAddressFeaturesExt = 1000244000,
	PhysicalDeviceBufferAddressFeaturesExt = 0,
	BufferDeviceAddressInfoExt = 0,
	BufferDeviceAddressCreateInfoExt = 1000244002,
	PhysicalDeviceToolPropertiesExt = 1000245000,
	ImageStencilUsageCreateInfoExt = 0,
	ValidationFeaturesExt = 1000247000,
	PhysicalDevicePresentWaitFeaturesKhr = 1000248000,
	PhysicalDeviceCooperativeMatrixFeatures = 1000249000,
	CooperativeMatrixProperties = 1000249001,
	PhysicalDeviceCooperativeMatrixProperties = 1000249002,
	PhysicalDeviceCoverageReductionModeFeatures = 1000250000,
	PipelineCoverageReductionStateCreateInfo = 1000250001,
	FrameBufferMixedSamplesCombination = 1000250002,
	PhysicalDeviceFragmentShaderInterlockFeaturesExt = 1000251000,
	PhysicalDeviceYcbcrImageArraysFeaturesExt = 1000252000,
	PhysicalDeviceUniformBufferStandardLayoutFeaturesKhr = 0,
	PhysicalDeviceProvokingVertexFeaturesExt = 1000254000,
	PipelineRasterizationProvokingVertexStateCreateInfoExt = 1000254001,
	PhysicalDeviceProvokingVertexPropertiesExt = 1000254002,
	SurfaceFullScreenExclusiveInfoExt = 1000255000,
	SurfaceCapabilitiesFullScreenExclusiveExt = 1000255002,
	SurfaceFullScreenExclusiveWin32InfoExt = 1000255001,
	HeadlessSurfaceCreateInfoExt = 1000256000,
	PhysicalDeviceBufferDeviceAddressFeaturesKhr = 0,
	BufferDeviceAddressInfoKhr = 0,
	BufferOpaqueCaptureAddressCreateInfoKhr = 0,
	MemoryOpaqueCaptureAddressAllocateInfoKhr = 0,
	DeviceMemoryOpaqueCaptureAddressInfoKhr = 0,
	PhysicalDeviceLineRasterizationFeaturesExt = 1000259000,
	PipelineRasterizationLineStateCreateInfoExt = 1000259001,
	PhysicalDeviceLineRasterizationPropertiesExt = 1000259002,
	PhysicalDeviceShaderAtomicFloatFeaturesExt = 1000260000,
	PhysicalDeviceHostQueryResetFeaturesExt = 0,
	PhysicalDeviceIndexTypeUInt8FeaturesExt = 1000265000,
	PhysicalDeviceExtendedDynamicStateFeaturesExt = 1000267000,
	PhysicalDevicePipelineExecutablePropertiesFeaturesKhr = 1000269000,
	PipelineInfoKhr = 1000269001,
	PipelineExecutablePropertiesKhr = 1000269002,
	PipelineExecutableInfoKhr = 1000269003,
	PipelineExecutableStatisticKhr = 1000269004,
	PipelineExecutableInternalRepresentationKhr = 1000269005,
	PhysicalDeviceShaderAtomicFloat2FeaturesExt = 1000273000,
	PhysicalDeviceShaderDemoteToHelperInvocationFeaturesExt = 1000276000,
	PhysicalDeviceDeviceGeneratedCommandsProperties = 1000277000,
	GraphicsShaderGroupCreateInfo = 1000277001,
	GraphicsPipelineShaderGroupsCreateInfo = 1000277002,
	IndirectCommandsLayoutToken = 1000277003,
	IndirectCommandsLayoutCreateInfo = 1000277004,
	GeneratedCommandsInfo = 1000277005,
	GeneratedCommandsMemoryRequirementsInfo = 1000277006,
	PhysicalDeviceDeviceGeneratedCommandsFeatures = 1000277007,
	PhysicalDeviceInheritedViewportScissorFeatures = 1000278000,
	CommandBufferInheritanceViewportScissorInfo = 1000278001,
	PhysicalDeviceShaderIntegerDotProductFeaturesKhr = 1000280000,
	PhysicalDeviceShaderIntegerDotProductPropertiesKhr = 1000280001,
	PhysicalDeviceTexelBufferAlignmentFeaturesExt = 1000281000,
	PhysicalDeviceTexelBufferAlignmentPropertiesExt = 1000281001,
	CommandBufferInheritanceRenderPassTransformInfoQcom = 1000282000,
	RenderPassTransformBeginInfoQcom = 1000282001,
	PhysicalDeviceDeviceMemoryReportFeaturesExt = 1000284000,
	DeviceDeviceMemoryReportCreateInfoExt = 1000284001,
	DeviceMemoryReportCallbackDataExt = 1000284002,
	PhysicalDeviceRobustness2FeaturesExt = 1000286000,
	PhysicalDeviceRobustness2PropertiesExt = 1000286001,
	SamplerCustomBorderColorCreateInfoExt = 1000287000,
	PhysicalDeviceCustomBorderColorPropertiesExt = 1000287001,
	PhysicalDeviceCustomBorderColorFeaturesExt = 1000287002,
	PipelineLibraryCreateInfoKhr = 1000290000,
	PresentIdKhr = 1000294000,
	PhysicalDevicePresentIdFeaturesKhr = 1000294001,
	PhysicalDevicePrivateDataFeaturesExt = 1000295000,
	DevicePrivateDataCreateInfoExt = 1000295001,
	PrivateDataSlotCreateInfoExt = 1000295002,
	PhysicalDevicePipelineCreationCacheControlFeaturesExt = 1000297000,
	VideoEncodeInfoKhr = 1000299000,
	VideoEncodeRateControlInfoKhr = 1000299001,
	PhysicalDeviceDiagnosticsConfigFeatures = 1000300000,
	DeviceDiagnosticsConfigCreateInfo = 1000300001,
	ReservedQcom = 1000309000,
	MemoryBarrier2Khr = 1000314000,
	BufferMemoryBarrier2Khr = 1000314001,
	ImageMemoryBarrier2Khr = 1000314002,
	DependencyInfoKhr = 1000314003,
	SubmitInfo2Khr = 1000314004,
	SemaphoreSubmitInfoKhr = 1000314005,
	CommandBufferSubmitInfoKhr = 1000314006,
	PhysicalDeviceSynchronization2FeaturesKhr = 1000314007,
	QueueFamilyCheckpointProperties2 = 1000314008,
	CheckpointData2 = 1000314009,
	PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKhr = 1000323000,
	PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKhr = 1000325000,
	PhysicalDeviceFragmentShadingRateEnumsProperties = 1000326000,
	PhysicalDeviceFragmentShadingRateEnumsFeatures = 1000326001,
	PipelineFragmentShadingRateEnumStateCreateInfo = 1000326002,
	AccelerationStructureGeometryMotionTrianglesData = 1000327000,
	PhysicalDeviceRayTracingMotionBlurFeatures = 1000327001,
	AccelerationStructureMotionInfo = 1000327002,
	PhysicalDeviceYcbcr2Plane444FormatsFeaturesExt = 1000330000,
	PhysicalDeviceFragmentDensityMap2FeaturesExt = 1000332000,
	PhysicalDeviceFragmentDensityMap2PropertiesExt = 1000332001,
	CopyCommandTransformInfoQcom = 1000333000,
	PhysicalDeviceImageRobustnessFeaturesExt = 1000335000,
	PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKhr = 1000336000,
	CopyBufferInfo2Khr = 1000337000,
	CopyImageInfo2Khr = 1000337001,
	CopyBufferToImageInfo2Khr = 1000337002,
	CopyImageToBufferInfo2Khr = 1000337003,
	BlitImageInfo2Khr = 1000337004,
	ResolveImageInfo2Khr = 1000337005,
	BufferCopy2Khr = 1000337006,
	ImageCopy2Khr = 1000337007,
	ImageBlit2Khr = 1000337008,
	BufferImageCopy2Khr = 1000337009,
	ImageResolve2Khr = 1000337010,
	PhysicalDevice4444FormatsFeaturesExt = 1000340000,
	PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesArm = 1000342000,
	PhysicalDeviceRgba10x6FormatsFeaturesExt = 1000344000,
	DirectfbSurfaceCreateInfoExt = 1000346000,
	PhysicalDeviceMutableDescriptorTypeFeaturesValve = 1000351000,
	MutableDescriptorTypeCreateInfoValve = 1000351002,
	PhysicalDeviceVertexInputDynamicStateFeaturesExt = 1000352000,
	VertexInputBindingDescription2Ext = 1000352001,
	VertexInputAttributeDescription2Ext = 1000352002,
	PhysicalDeviceDrmPropertiesExt = 1000353000,
	PhysicalDeviceDepthClipControlFeaturesExt = 1000355000,
	PipelineViewportDepthClipControlCreateInfoExt = 1000355001,
	PhysicalDevicePrimitiveTopologyListRestartFeaturesExt = 1000356000,
	FormatProperties3Khr = 1000360000,
	ImportMemoryZirconHandleInfoFuchsia = 1000364000,
	MemoryZirconHandlePropertiesFuchsia = 1000364001,
	MemoryGetZirconHandleInfoFuchsia = 1000364002,
	ImportSemaphoreZirconHandleInfoFuchsia = 1000365000,
	SemaphoreGetZirconHandleInfoFuchsia = 1000365001,
	BufferCollectionCreateInfoFuchsia = 1000366000,
	ImportMemoryBufferCollectionFuchsia = 1000366001,
	BufferCollectionImageCreateInfoFuchsia = 1000366002,
	BufferCollectionPropertiesFuchsia = 1000366003,
	BufferConstraintsInfoFuchsia = 1000366004,
	BufferCollectionBufferCreateInfoFuchsia = 1000366005,
	ImageConstraintsInfoFuchsia = 1000366006,
	ImageFormatConstraintsInfoFuchsia = 1000366007,
	SysmemColorSpaceFuchsia = 1000366008,
	BufferCollectionConstraintsInfoFuchsia = 1000366009,
	SubpassShadingPipelineCreateInfoHuawei = 1000369000,
	PhysicalDeviceSubpassShadingFeaturesHuawei = 1000369001,
	PhysicalDeviceSubpassShadingPropertiesHuawei = 1000369002,
	PhysicalDeviceInvocationMaskFeaturesHuawei = 1000370000,
	MemoryGetRemoteAddressInfo = 1000371000,
	PhysicalDeviceExternalMemoryRdmaFeatures = 1000371001,
	PhysicalDeviceExtendedDynamicState2FeaturesExt = 1000377000,
	ScreenSurfaceCreateInfoQnx = 1000378000,
	PhysicalDeviceColorWriteEnableFeaturesExt = 1000381000,
	PipelineColorWriteCreateInfoExt = 1000381001,
	PhysicalDeviceGlobalPriorityQueryFeaturesExt = 1000388000,
	QueueFamilyGlobalPriorityPropertiesExt = 1000388001,
	PhysicalDeviceImageViewMinLodFeaturesExt = 1000391000,
	ImageViewMinLodCreateInfoExt = 1000391001,
	PhysicalDeviceMultiDrawFeaturesExt = 1000392000,
	PhysicalDeviceMultiDrawPropertiesExt = 1000392001,
	PhysicalDeviceBorderColorSwizzleFeaturesExt = 1000411000,
	SamplerBorderColorComponentMappingCreateInfoExt = 1000411001,
	PhysicalDevicePageableDeviceLocalMemoryFeaturesExt = 1000412000,
	PhysicalDeviceMaintenance4FeaturesKhr = 1000413000,
	PhysicalDeviceMaintenance4PropertiesKhr = 1000413001,
	DeviceBufferMemoryRequirementsKhr = 1000413002,
	DeviceImageMemoryRequirementsKhr = 1000413003,
}

public enum VkSubpassContents
{
	Inline = 0,
	SecondaryCommandBuffers = 1,
}

public enum VkResult
{
	/// <summary>
	/// Command completed successfully
	/// </summary>
	Success = 0,
	/// <summary>
	/// A fence or query has not yet completed
	/// </summary>
	NotReady = 1,
	/// <summary>
	/// A wait operation has not completed in the specified time
	/// </summary>
	Timeout = 2,
	/// <summary>
	/// An event is signaled
	/// </summary>
	EventSet = 3,
	/// <summary>
	/// An event is unsignaled
	/// </summary>
	EventReset = 4,
	/// <summary>
	/// A return array was too small for the result
	/// </summary>
	Incomplete = 5,
	/// <summary>
	/// A host memory allocation has failed
	/// </summary>
	ErrorOutOfHostMemory = -1,
	/// <summary>
	/// A device memory allocation has failed
	/// </summary>
	ErrorOutOfDeviceMemory = -2,
	/// <summary>
	/// Initialization of a object has failed
	/// </summary>
	ErrorInitializationFailed = -3,
	/// <summary>
	/// The logical device has been lost. See <<devsandqueues-lost-device>>
	/// </summary>
	ErrorDeviceLost = -4,
	/// <summary>
	/// Mapping of a memory object has failed
	/// </summary>
	ErrorMemoryMapFailed = -5,
	/// <summary>
	/// Layer specified does not exist
	/// </summary>
	ErrorLayerNotPresent = -6,
	/// <summary>
	/// Extension specified does not exist
	/// </summary>
	ErrorExtensionNotPresent = -7,
	/// <summary>
	/// Requested feature is not available on this device
	/// </summary>
	ErrorFeatureNotPresent = -8,
	/// <summary>
	/// Unable to find a Vulkan driver
	/// </summary>
	ErrorIncompatibleDriver = -9,
	/// <summary>
	/// Too many objects of the type have already been created
	/// </summary>
	ErrorTooManyObjects = -10,
	/// <summary>
	/// Requested format is not supported on this device
	/// </summary>
	ErrorFormatNotSupported = -11,
	/// <summary>
	/// A requested pool allocation has failed due to fragmentation of the pool's memory
	/// </summary>
	ErrorFragmentedPool = -12,
	/// <summary>
	/// An unknown error has occurred, due to an implementation or application bug
	/// </summary>
	ErrorUnknown = -13,
	ErrorSurfaceLostKhr = -1000000000,
	ErrorNativeWindowInUseKhr = -1000000001,
	SuboptimalKhr = 1000001003,
	ErrorOutOfDateKhr = -1000001004,
	ErrorIncompatibleDisplayKhr = -1000003001,
	ErrorValidationFailedExt = -1000011001,
	ErrorInvalidShader = -1000012000,
	ErrorOutOfPoolMemoryKhr = 0,
	ErrorInvalidExternalHandleKhr = 0,
	ErrorInvalidDrmFormatModifierPlaneLayoutExt = -1000158000,
	ErrorFragmentationExt = 0,
	ErrorNotPermittedExt = -1000174001,
	ErrorInvalidDeviceAddressExt = 0,
	ErrorFullScreenExclusiveModeLostExt = -1000255000,
	ErrorInvalidOpaqueCaptureAddressKhr = 0,
	ThreadIdleKhr = 1000268000,
	ThreadDoneKhr = 1000268001,
	OperationDeferredKhr = 1000268002,
	OperationNotDeferredKhr = 1000268003,
	PipelineCompileRequiredExt = 1000297000,
	ErrorPipelineCompileRequiredExt = 0,
}

public enum VkDynamicState
{
	/// <summary>
	/// Specifies that the pname:pViewports state in slink:VkPipelineViewportStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetViewport before any drawing commands. The number of viewports used by a pipeline is still specified by the pname:viewportCount member of slink:VkPipelineViewportStateCreateInfo.
	/// </summary>
	Viewport = 0,
	/// <summary>
	/// Specifies that the pname:pScissors state in slink:VkPipelineViewportStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetScissor before any drawing commands. The number of scissor rectangles used by a pipeline is still specified by the pname:scissorCount member of slink:VkPipelineViewportStateCreateInfo.
	/// </summary>
	Scissor = 1,
	/// <summary>
	/// Specifies that the pname:lineWidth state in slink:VkPipelineRasterizationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetLineWidth before any drawing commands that generate line primitives for the rasterizer.
	/// </summary>
	LineWidth = 2,
	/// <summary>
	/// Specifies that the pname:depthBiasConstantFactor, pname:depthBiasClamp and pname:depthBiasSlopeFactor states in slink:VkPipelineRasterizationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthBias before any draws are performed with pname:depthBiasEnable in slink:VkPipelineRasterizationStateCreateInfo set to ename:VK_TRUE.
	/// </summary>
	DepthBias = 3,
	/// <summary>
	/// Specifies that the pname:blendConstants state in slink:VkPipelineColorBlendStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetBlendConstants before any draws are performed with a pipeline state with sname:VkPipelineColorBlendAttachmentState member pname:blendEnable set to ename:VK_TRUE and any of the blend functions using a constant blend color.
	/// </summary>
	BlendConstants = 4,
	/// <summary>
	/// Specifies that the pname:minDepthBounds and pname:maxDepthBounds states of slink:VkPipelineDepthStencilStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthBounds before any draws are performed with a pipeline state with slink:VkPipelineDepthStencilStateCreateInfo member pname:depthBoundsTestEnable set to ename:VK_TRUE.
	/// </summary>
	DepthBounds = 5,
	/// <summary>
	/// Specifies that the pname:compareMask state in slink:VkPipelineDepthStencilStateCreateInfo for both pname:front and pname:back will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetStencilCompareMask before any draws are performed with a pipeline state with slink:VkPipelineDepthStencilStateCreateInfo member pname:stencilTestEnable set to ename:VK_TRUE
	/// </summary>
	StencilCompareMask = 6,
	/// <summary>
	/// Specifies that the pname:writeMask state in slink:VkPipelineDepthStencilStateCreateInfo for both pname:front and pname:back will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetStencilWriteMask before any draws are performed with a pipeline state with slink:VkPipelineDepthStencilStateCreateInfo member pname:stencilTestEnable set to ename:VK_TRUE
	/// </summary>
	StencilWriteMask = 7,
	/// <summary>
	/// Specifies that the pname:reference state in slink:VkPipelineDepthStencilStateCreateInfo for both pname:front and pname:back will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetStencilReference before any draws are performed with a pipeline state with slink:VkPipelineDepthStencilStateCreateInfo member pname:stencilTestEnable set to ename:VK_TRUE
	/// </summary>
	StencilReference = 8,
	/// <summary>
	/// Specifies that the pname:pViewportScalings state in slink:VkPipelineViewportWScalingStateCreateInfoNV will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetViewportWScalingNV before any draws are performed with a pipeline state with slink:VkPipelineViewportWScalingStateCreateInfoNV member pname:viewportScalingEnable set to ename:VK_TRUE
	/// </summary>
	ViewportWScaling = 1000087000,
	/// <summary>
	/// Specifies that the pname:pDiscardRectangles state in slink:VkPipelineDiscardRectangleStateCreateInfoEXT will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDiscardRectangleEXT before any draw or clear commands. The elink:VkDiscardRectangleModeEXT and the number of active discard rectangles is still specified by the pname:discardRectangleMode and pname:discardRectangleCount members of slink:VkPipelineDiscardRectangleStateCreateInfoEXT.
	/// </summary>
	DiscardRectangleExt = 1000099000,
	/// <summary>
	/// Specifies that the pname:sampleLocationsInfo state in slink:VkPipelineSampleLocationsStateCreateInfoEXT will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetSampleLocationsEXT before any draw or clear commands. Enabling custom sample locations is still indicated by the pname:sampleLocationsEnable member of slink:VkPipelineSampleLocationsStateCreateInfoEXT.
	/// </summary>
	SampleLocationsExt = 1000143000,
	/// <summary>
	/// Specifies that the default stack size computation for the pipeline will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetRayTracingPipelineStackSizeKHR before any ray tracing calls are performed.
	/// </summary>
	RayTracingPipelineStackSizeKhr = 1000347000,
	/// <summary>
	/// Specifies that the pname:pShadingRatePalettes state in slink:VkPipelineViewportShadingRateImageStateCreateInfoNV will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetViewportShadingRatePaletteNV before any drawing commands.
	/// </summary>
	ViewportShadingRatePalette = 1000164004,
	/// <summary>
	/// Specifies that the coarse sample order state in slink:VkPipelineViewportCoarseSampleOrderStateCreateInfoNV will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetCoarseSampleOrderNV before any drawing commands.
	/// </summary>
	ViewportCoarseSampleOrder = 1000164006,
	/// <summary>
	/// Specifies that the pname:pExclusiveScissors state in slink:VkPipelineViewportExclusiveScissorStateCreateInfoNV will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetExclusiveScissorNV before any drawing commands. The number of exclusive scissor rectangles used by a pipeline is still specified by the pname:exclusiveScissorCount member of slink:VkPipelineViewportExclusiveScissorStateCreateInfoNV.
	/// </summary>
	ExclusiveScissor = 1000205001,
	/// <summary>
	/// Specifies that state in slink:VkPipelineFragmentShadingRateStateCreateInfoKHR
	/// </summary>
	FragmentShadingRateKhr = 1000226000,
	/// <summary>
	/// Specifies that the pname:lineStippleFactor and pname:lineStipplePattern state in slink:VkPipelineRasterizationLineStateCreateInfoEXT will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetLineStippleEXT before any draws are performed with a pipeline state with slink:VkPipelineRasterizationLineStateCreateInfoEXT member pname:stippledLineEnable set to ename:VK_TRUE.
	/// </summary>
	LineStippleExt = 1000259000,
	/// <summary>
	/// Specifies that the pname:cullMode state in slink:VkPipelineRasterizationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetCullModeEXT before any drawing commands.
	/// </summary>
	CullModeExt = 1000267000,
	/// <summary>
	/// Specifies that the pname:frontFace state in slink:VkPipelineRasterizationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetFrontFaceEXT before any drawing commands.
	/// </summary>
	FrontFaceExt = 1000267001,
	/// <summary>
	/// Specifies that the pname:topology state in slink:VkPipelineInputAssemblyStateCreateInfo only specifies the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#drawing-primitive-topology-class"> topology class</seealso>, and the specific topology order and adjacency <b>must</b> be set dynamically with flink:vkCmdSetPrimitiveTopologyEXT before any drawing commands.
	/// </summary>
	PrimitiveTopologyExt = 1000267002,
	/// <summary>
	/// Specifies that the pname:viewportCount and pname:pViewports state in slink:VkPipelineViewportStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetViewportWithCountEXT before any draw call.
	/// </summary>
	ViewportWithCountExt = 1000267003,
	/// <summary>
	/// Specifies that the pname:scissorCount and pname:pScissors state in slink:VkPipelineViewportStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetScissorWithCountEXT before any draw call.
	/// </summary>
	ScissorWithCountExt = 1000267004,
	/// <summary>
	/// Specifies that the pname:stride state in slink:VkVertexInputBindingDescription will be ignored and <b>must</b> be set dynamically with
	/// </summary>
	VertexInputBindingStrideExt = 1000267005,
	/// <summary>
	/// Specifies that the pname:depthTestEnable state in slink:VkPipelineDepthStencilStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthTestEnableEXT before any draw call.
	/// </summary>
	DepthTestEnableExt = 1000267006,
	/// <summary>
	/// Specifies that the pname:depthWriteEnable state in slink:VkPipelineDepthStencilStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthWriteEnableEXT before any draw call.
	/// </summary>
	DepthWriteEnableExt = 1000267007,
	/// <summary>
	/// Specifies that the pname:depthCompareOp state in slink:VkPipelineDepthStencilStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthCompareOpEXT before any draw call.
	/// </summary>
	DepthCompareOpExt = 1000267008,
	/// <summary>
	/// Specifies that the pname:depthBoundsTestEnable state in slink:VkPipelineDepthStencilStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthBoundsTestEnableEXT before any draw call.
	/// </summary>
	DepthBoundsTestEnableExt = 1000267009,
	/// <summary>
	/// Specifies that the pname:stencilTestEnable state in slink:VkPipelineDepthStencilStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetStencilTestEnableEXT before any draw call.
	/// </summary>
	StencilTestEnableExt = 1000267010,
	/// <summary>
	/// Specifies that the pname:failOp, pname:passOp, pname:depthFailOp, and pname:compareOp states in sname:VkPipelineDepthStencilStateCreateInfo for both pname:front and pname:back will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetStencilOpEXT before any draws are performed with a pipeline state with sname:VkPipelineDepthStencilStateCreateInfo member pname:stencilTestEnable set to ename:VK_TRUE
	/// </summary>
	StencilOpExt = 1000267011,
	/// <summary>
	/// Specifies that the pname:pVertexInputState state will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetVertexInputEXT before any drawing commands
	/// </summary>
	VertexInputExt = 1000352000,
	/// <summary>
	/// Specifies that the pname:patchControlPoints state in slink:VkPipelineTessellationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetPatchControlPointsEXT before any drawing commands.
	/// </summary>
	PatchControlPointsExt = 1000377000,
	/// <summary>
	/// Specifies that the pname:rasterizerDiscardEnable state in slink:VkPipelineRasterizationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetRasterizerDiscardEnableEXT before any drawing commands.
	/// </summary>
	RasterizerDiscardEnableExt = 1000377001,
	/// <summary>
	/// Specifies that the pname:depthBiasEnable state in slink:VkPipelineRasterizationStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetDepthBiasEnableEXT before any drawing commands.
	/// </summary>
	DepthBiasEnableExt = 1000377002,
	/// <summary>
	/// Specifies that the pname:logicOp state in slink:VkPipelineColorBlendStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetLogicOpEXT before any drawing commands.
	/// </summary>
	LogicOpExt = 1000377003,
	/// <summary>
	/// Specifies that the pname:primitiveRestartEnable state in slink:VkPipelineInputAssemblyStateCreateInfo will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetPrimitiveRestartEnableEXT before any drawing commands.
	/// </summary>
	PrimitiveRestartEnableExt = 1000377004,
	/// <summary>
	/// Specifies that the pname:pColorWriteEnables state in slink:VkPipelineColorWriteCreateInfoEXT will be ignored and <b>must</b> be set dynamically with flink:vkCmdSetColorWriteEnableEXT before any draw call.
	/// </summary>
	ColorWriteEnableExt = 1000381000,
}

public enum VkDescriptorUpdateTemplateType
{
	/// <summary>
	/// Specifies that the descriptor update template will be used for descriptor set updates only.
	/// </summary>
	DescriptorSet = 0,
	/// <summary>
	/// Specifies that the descriptor update template will be used for push descriptor updates only.
	/// </summary>
	PushDescriptorsKhr = 1,
	DescriptorSetKhr = 0,
}

public enum VkObjectType
{
	Unknown = 0,
	Instance = 1,
	PhysicalDevice = 2,
	Device = 3,
	Queue = 4,
	Semaphore = 5,
	CommandBuffer = 6,
	Fence = 7,
	DeviceMemory = 8,
	Buffer = 9,
	Image = 10,
	Event = 11,
	QueryPool = 12,
	BufferView = 13,
	ImageView = 14,
	ShaderModule = 15,
	PipelineCache = 16,
	PipelineLayout = 17,
	RenderPass = 18,
	Pipeline = 19,
	DescriptorSetLayout = 20,
	Sampler = 21,
	DescriptorPool = 22,
	DescriptorSet = 23,
	FrameBuffer = 24,
	CommandPool = 25,
	SurfaceKhr = 1000000000,
	SwapchainKhr = 1000001000,
	DisplayKhr = 1000002000,
	DisplayModeKhr = 1000002001,
	DebugReportCallbackExt = 1000011000,
	/// <summary>
	/// VkVideoSessionKHR
	/// </summary>
	VideoSessionKhr = 1000023000,
	/// <summary>
	/// VkVideoSessionParametersKHR
	/// </summary>
	VideoSessionParametersKhr = 1000023001,
	CuModulex = 1000029000,
	CuFunctionx = 1000029001,
	DescriptorUpdateTemplateKhr = 0,
	DebugUtilsMessengerExt = 1000128000,
	AccelerationStructureKhr = 1000150000,
	SamplerYcbcrConversionKhr = 0,
	ValidationCacheExt = 1000160000,
	AccelerationStructure = 1000165000,
	PerformanceConfigurationIntel = 1000210000,
	DeferredOperationKhr = 1000268000,
	IndirectCommandsLayout = 1000277000,
	PrivateDataSlotExt = 1000295000,
	/// <summary>
	/// VkBufferCollectionFUCHSIA
	/// </summary>
	BufferCollectionFuchsia = 1000366000,
}

[Flags]
public enum VkQueueFlags
{
	/// <summary>
	/// Queue supports graphics operations
	/// </summary>
	Graphics = 0,
	/// <summary>
	/// Queue supports compute operations
	/// </summary>
	Compute = 1,
	/// <summary>
	/// Queue supports transfer operations
	/// </summary>
	Transfer = 2,
	/// <summary>
	/// Queue supports sparse resource memory management operations
	/// </summary>
	SparseBinding = 3,
	VideoDecodeKhr = 32,
	VideoEncodeKhr = 64,
}

[Flags]
public enum VkCullModeFlags
{
	None = 0,
	Front = 0,
	Back = 1,
	FrontAndBack = 0x00000003,
}

[Flags]
public enum VkRenderPassCreateFlags
{
	Reserved0Khr = 1,
	TransformQcom = 2,
}

[Flags]
public enum VkDeviceQueueCreateFlags
{
	None = 0,
}

[Flags]
public enum VkMemoryPropertyFlags
{
	/// <summary>
	/// If otherwise stated, then allocate memory on device
	/// </summary>
	DeviceLocal = 0,
	/// <summary>
	/// Memory is mappable by host
	/// </summary>
	HostVisible = 1,
	/// <summary>
	/// Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
	/// </summary>
	HostCoherent = 2,
	/// <summary>
	/// Memory will be cached by the host
	/// </summary>
	HostCached = 3,
	/// <summary>
	/// Memory may be allocated by the driver when it is required
	/// </summary>
	LazilyAllocated = 4,
	DeviceCoherentAmd = 64,
	DeviceUncachedAmd = 128,
	RdmaCapable = 256,
}

[Flags]
public enum VkMemoryHeapFlags
{
	/// <summary>
	/// If set, heap represents device memory
	/// </summary>
	DeviceLocal = 0,
	MultiInstanceKhr = 0,
	Reserved2Khr = 4,
}

[Flags]
public enum VkAccessFlags
{
	/// <summary>
	/// Controls coherency of indirect command reads
	/// </summary>
	IndirectCommandRead = 0,
	/// <summary>
	/// Controls coherency of index reads
	/// </summary>
	IndexRead = 1,
	/// <summary>
	/// Controls coherency of vertex attribute reads
	/// </summary>
	VertexAttributeRead = 2,
	/// <summary>
	/// Controls coherency of uniform buffer reads
	/// </summary>
	UniformRead = 3,
	/// <summary>
	/// Controls coherency of input attachment reads
	/// </summary>
	InputAttachmentRead = 4,
	/// <summary>
	/// Controls coherency of shader reads
	/// </summary>
	ShaderRead = 5,
	/// <summary>
	/// Controls coherency of shader writes
	/// </summary>
	ShaderWrite = 6,
	/// <summary>
	/// Controls coherency of color attachment reads
	/// </summary>
	ColorAttachmentRead = 7,
	/// <summary>
	/// Controls coherency of color attachment writes
	/// </summary>
	ColorAttachmentWrite = 8,
	/// <summary>
	/// Controls coherency of depth/stencil attachment reads
	/// </summary>
	DepthStencilAttachmentRead = 9,
	/// <summary>
	/// Controls coherency of depth/stencil attachment writes
	/// </summary>
	DepthStencilAttachmentWrite = 10,
	/// <summary>
	/// Controls coherency of transfer reads
	/// </summary>
	TransferRead = 11,
	/// <summary>
	/// Controls coherency of transfer writes
	/// </summary>
	TransferWrite = 12,
	/// <summary>
	/// Controls coherency of host reads
	/// </summary>
	HostRead = 13,
	/// <summary>
	/// Controls coherency of host writes
	/// </summary>
	HostWrite = 14,
	/// <summary>
	/// Controls coherency of memory reads
	/// </summary>
	MemoryRead = 15,
	/// <summary>
	/// Controls coherency of memory writes
	/// </summary>
	MemoryWrite = 16,
	TransformFeedbackWriteExt = 33554432,
	TransformFeedbackCounterReadExt = 67108864,
	TransformFeedbackCounterWriteExt = 134217728,
	/// <summary>
	/// read access flag for reading conditional rendering predicate
	/// </summary>
	ConditionalRenderingReadExt = 1048576,
	ColorAttachmentReadNoncoherentExt = 524288,
	AccelerationStructureReadKhr = 2097152,
	AccelerationStructureWriteKhr = 4194304,
	ShadingRateImageRead = 0,
	AccelerationStructureRead = 0,
	AccelerationStructureWrite = 0,
	FragmentDensityMapReadExt = 16777216,
	FragmentShadingRateAttachmentReadKhr = 8388608,
	CommandPreprocessRead = 131072,
	CommandPreprocessWrite = 262144,
	NoneKhr = 0,
}

[Flags]
public enum VkBufferUsageFlags
{
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used as the source of a <i>transfer command</i> (see the definition of <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#synchronization-pipeline-stages-transfer"> <see cref="VkPipelineStageFlags.Transfer">VkPipelineStageFlags.Transfer</see></seealso>).
	/// </summary>
	TransferSrc = 0,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used as the destination of a transfer command.
	/// </summary>
	TransferDst = 1,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used to create a sname:VkBufferView suitable for occupying a sname:VkDescriptorSet slot of type <see cref="VkDescriptorType.UniformTexelBuffer">VkDescriptorType.UniformTexelBuffer</see>.
	/// </summary>
	UniformTexelBuffer = 2,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used to create a sname:VkBufferView suitable for occupying a sname:VkDescriptorSet slot of type <see cref="VkDescriptorType.StorageTexelBuffer">VkDescriptorType.StorageTexelBuffer</see>.
	/// </summary>
	StorageTexelBuffer = 3,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used in a sname:VkDescriptorBufferInfo suitable for occupying a sname:VkDescriptorSet slot either of type <see cref="VkDescriptorType.UniformBuffer">VkDescriptorType.UniformBuffer</see> or <see cref="VkDescriptorType.UniformBuffer">VkDescriptorType.UniformBuffer</see>_DYNAMIC.
	/// </summary>
	UniformBuffer = 4,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used in a sname:VkDescriptorBufferInfo suitable for occupying a sname:VkDescriptorSet slot either of type <see cref="VkDescriptorType.StorageBuffer">VkDescriptorType.StorageBuffer</see> or <see cref="VkDescriptorType.StorageBuffer">VkDescriptorType.StorageBuffer</see>_DYNAMIC.
	/// </summary>
	StorageBuffer = 5,
	/// <summary>
	/// Specifies that the buffer is suitable for passing as the pname:buffer parameter to flink:vkCmdBindIndexBuffer.
	/// </summary>
	IndexBuffer = 6,
	/// <summary>
	/// Specifies that the buffer is suitable for passing as an element of the pname:pBuffers array to flink:vkCmdBindVertexBuffers.
	/// </summary>
	VertexBuffer = 7,
	/// <summary>
	/// Specifies that the buffer is suitable for passing as the pname:buffer parameter to flink:vkCmdDrawIndirect, flink:vkCmdDrawIndexedIndirect, flink:vkCmdDrawMeshTasksIndirectNV, flink:vkCmdDrawMeshTasksIndirectCountNV, or flink:vkCmdDispatchIndirect. It is also suitable for passing as the pname:buffer member of sname:VkIndirectCommandsStreamNV, or pname:sequencesCountBuffer or pname:sequencesIndexBuffer or pname:preprocessedBuffer member of sname:VkGeneratedCommandsInfoNV
	/// </summary>
	IndirectBuffer = 8,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used as the source bitstream buffer in a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operation</seealso>.
	/// </summary>
	VideoDecodeSrcKhr = 8192,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used as the destination status buffer in a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operation</seealso>.
	/// </summary>
	VideoDecodeDstKhr = 16384,
	/// <summary>
	/// Specifies that the buffer is suitable for using for binding as a transform feedback buffer with flink:vkCmdBindTransformFeedbackBuffersEXT.
	/// </summary>
	TransformFeedbackBufferExt = 2048,
	/// <summary>
	/// Specifies that the buffer is suitable for using as a counter buffer with flink:vkCmdBeginTransformFeedbackEXT and flink:vkCmdEndTransformFeedbackEXT.
	/// </summary>
	TransformFeedbackCounterBufferExt = 4096,
	/// <summary>
	/// Specifies that the buffer is suitable for passing as the pname:buffer parameter to flink:vkCmdBeginConditionalRenderingEXT.
	/// </summary>
	ConditionalRenderingExt = 512,
	/// <summary>
	/// Specifies that the buffer is suitable for use as a read-only input to an <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#acceleration-structure-building">acceleration structure build</seealso>.
	/// </summary>
	AccelerationStructureBuildInputReadOnlyKhr = 524288,
	/// <summary>
	/// Specifies that the buffer is suitable for storage space for a slink:VkAccelerationStructureKHR.
	/// </summary>
	AccelerationStructureStorageKhr = 1048576,
	/// <summary>
	/// Specifies that the buffer is suitable for use as a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#shader-binding-table">Shader Binding Table</seealso>.
	/// </summary>
	ShaderBindingTableKhr = 1024,
	/// <summary>
	/// Specifies that the buffer is suitable for use in flink:vkCmdTraceRaysNV.
	/// </summary>
	RayTracing = 0,
	Reserved18Qcom = 262144,
	ShaderDeviceAddressExt = 0,
	ShaderDeviceAddressKhr = 0,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be used as the destination status buffer in a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-encode-operations"> video encode operation</seealso>.
	/// </summary>
	VideoEncodeDstKhr = 32768,
	VideoEncodeSrcKhr = 65536,
	Reserved21Amd = 2097152,
	Reserved22Amd = 4194304,
}

[Flags]
public enum VkBufferCreateFlags
{
	/// <summary>
	/// Specifies that the buffer will be backed using sparse memory binding.
	/// </summary>
	SparseBinding = 0,
	/// <summary>
	/// Specifies that the buffer <b>can</b> be partially backed using sparse memory binding. Buffers created with this flag <b>must</b> also be created with the <see cref="VkBufferCreateFlags.SparseBinding">VkBufferCreateFlags.SparseBinding</see> flag.
	/// </summary>
	SparseResidency = 1,
	/// <summary>
	/// Specifies that the buffer will be backed using sparse memory binding with memory ranges that might also simultaneously be backing another buffer (or another portion of the same buffer). Buffers created with this flag <b>must</b> also be created with the <see cref="VkBufferCreateFlags.SparseBinding">VkBufferCreateFlags.SparseBinding</see> flag.
	/// </summary>
	SparseAliased = 2,
	DeviceAddressCaptureReplayExt = 0,
	DeviceAddressCaptureReplayKhr = 0,
	Reserved5Amd = 32,
}

[Flags]
public enum VkShaderStageFlags
{
	/// <summary>
	/// Specifies the vertex stage.
	/// </summary>
	Vertex = 0,
	/// <summary>
	/// Specifies the tessellation control stage.
	/// </summary>
	TessellationControl = 1,
	/// <summary>
	/// Specifies the tessellation evaluation stage.
	/// </summary>
	TessellationEvaluation = 2,
	/// <summary>
	/// Specifies the geometry stage.
	/// </summary>
	Geometry = 3,
	/// <summary>
	/// Specifies the fragment stage.
	/// </summary>
	Fragment = 4,
	/// <summary>
	/// Specifies the compute stage.
	/// </summary>
	Compute = 5,
	/// <summary>
	/// Is a combination of bits used as shorthand to specify all graphics stages defined above (excluding the compute stage).
	/// </summary>
	AllGraphics = 0x0000001F,
	/// <summary>
	/// Is a combination of bits used as shorthand to specify all shader stages supported by the device, including all additional stages which are introduced by extensions.
	/// </summary>
	All = 0x7FFFFFFF,
	/// <summary>
	/// Specifies the ray generation stage.
	/// </summary>
	RaygenKhr = 256,
	/// <summary>
	/// Specifies the any-hit stage.
	/// </summary>
	AnyHitKhr = 512,
	/// <summary>
	/// Specifies the closest hit stage.
	/// </summary>
	ClosestHitKhr = 1024,
	/// <summary>
	/// Specifies the miss stage.
	/// </summary>
	MissKhr = 2048,
	/// <summary>
	/// Specifies the intersection stage.
	/// </summary>
	IntersectionKhr = 4096,
	/// <summary>
	/// Specifies the callable stage.
	/// </summary>
	CallableKhr = 8192,
	Raygen = 0,
	AnyHit = 0,
	ClosestHit = 0,
	Miss = 0,
	Intersection = 0,
	Callable = 0,
	/// <summary>
	/// Specifies the task stage.
	/// </summary>
	Task = 64,
	/// <summary>
	/// Specifies the mesh stage.
	/// </summary>
	Mesh = 128,
	SubpassShadingHuawei = 16384,
}

[Flags]
public enum VkImageUsageFlags
{
	/// <summary>
	/// Specifies that the image <b>can</b> be used as the source of a transfer command.
	/// </summary>
	TransferSrc = 0,
	/// <summary>
	/// Specifies that the image <b>can</b> be used as the destination of a transfer command.
	/// </summary>
	TransferDst = 1,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for occupying a sname:VkDescriptorSet slot either of type <see cref="VkDescriptorType.SampledImage">VkDescriptorType.SampledImage</see> or <see cref="VkDescriptorType.CombinedImageSampler">VkDescriptorType.CombinedImageSampler</see>, and be sampled by a shader.
	/// </summary>
	Sampled = 2,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for occupying a sname:VkDescriptorSet slot of type <see cref="VkDescriptorType.StorageImage">VkDescriptorType.StorageImage</see>.
	/// </summary>
	Storage = 3,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for use as a color or resolve attachment in a sname:VkFramebuffer.
	/// </summary>
	ColorAttachment = 4,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for use as a depth/stencil or depth/stencil resolve attachment in a sname:VkFramebuffer.
	/// </summary>
	DepthStencilAttachment = 5,
	/// <summary>
	/// Specifies that implementations <b>may</b> support using <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#memory"> memory allocations</seealso> with the <see cref="VkMemoryPropertyFlags.LazilyAllocated">VkMemoryPropertyFlags.LazilyAllocated</see> to back an image with this usage. This bit <b>can</b> be set for any image that <b>can</b> be used to create a sname:VkImageView suitable for use as a color, resolve, depth/stencil, or input attachment.
	/// </summary>
	TransientAttachment = 6,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for occupying sname:VkDescriptorSet slot of type
	/// </summary>
	InputAttachment = 7,
	/// <summary>
	/// Specifies that <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operations>> can use the image as a <<reference-picture,reference picture</seealso>, or a source of postprocessing, or transfer operation.
	/// </summary>
	VideoDecodeDstKhr = 1024,
	VideoDecodeSrcKhr = 2048,
	/// <summary>
	/// Specifies that <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-decode-operations"> video decode operations>> can use the image as a <<video-picture-resources,DPB Video Picture Resource>>, representing a <<reference-picture,reference picture>>. This flag <b>must</b> be combined with <see cref="VkImageUsageFlags.VideoDecodeDstKhr">VkImageUsageFlags.VideoDecodeDstKhr</see> and <see cref="VkImageUsageFlags.VideoDecodeSrcKhr">VkImageUsageFlags.VideoDecodeSrcKhr</see>. <see cref="VkImageUsageFlags.VideoDecodeDstKhr">VkImageUsageFlags.VideoDecodeDstKhr</see> is required for DPB image resources because these resources will be associated with <<reference-picture,reference pictures>> after acting as targets for video decode operations. <see cref="VkImageUsageFlags.VideoDecodeSrcKhr">VkImageUsageFlags.VideoDecodeSrcKhr</see> is required for DPB image resources because the <<reference-picture,reference pictures</seealso> associated with them act as information sources for subsequent decode operations.
	/// </summary>
	VideoDecodeDpbKhr = 4096,
	ShadingRateImage = 0,
	Reserved16Qcom = 65536,
	Reserved17Qcom = 131072,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for use as a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#fragmentdensitymapops"> fragment density map image</seealso>.
	/// </summary>
	FragmentDensityMapExt = 512,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView suitable for use as a
	/// </summary>
	FragmentShadingRateAttachmentKhr = 256,
	VideoEncodeDstKhr = 8192,
	/// <summary>
	/// Specifies that the image can be used as an <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#input-encode-picture">input picture>> for <<video-encode-operations, video encode operations</seealso>.
	/// </summary>
	VideoEncodeSrcKhr = 16384,
	/// <summary>
	/// Specifies that <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#video-encode-operations"> video encode operations>> can use the image to hold a <<video-picture-resources,reconstructed picture>>, and to act as a <<reference-picture,reference picture>>. This flag <b>must</b> be combined with <see cref="VkImageUsageFlags.VideoEncodeDstKhr">VkImageUsageFlags.VideoEncodeDstKhr</see> and <see cref="VkImageUsageFlags.VideoEncodeSrcKhr">VkImageUsageFlags.VideoEncodeSrcKhr</see>. <see cref="VkImageUsageFlags.VideoEncodeDstKhr">VkImageUsageFlags.VideoEncodeDstKhr</see> is required for a DPB image resource because the reconstructed picture resulting from an encode operation will be written to it. <see cref="VkImageUsageFlags.VideoEncodeSrcKhr">VkImageUsageFlags.VideoEncodeSrcKhr</see> is required for DPB image resources because it can be used as a <<reference-picture,reconstructed reference picture</seealso> source for the encode operation.
	/// </summary>
	VideoEncodeDpbKhr = 32768,
	Reserved19Ext = 524288,
	InvocationMaskHuawei = 262144,
}

[Flags]
public enum VkImageCreateFlags
{
	/// <summary>
	/// Specifies that the image will be backed using sparse memory binding.
	/// </summary>
	CreateSparseBinding = 0,
	/// <summary>
	/// Specifies that the image <b>can</b> be partially backed using sparse memory binding. Images created with this flag <b>must</b> also be created with the <see cref="VkImageCreateFlags.CreateSparseBinding">VkImageCreateFlags.CreateSparseBinding</see> flag.
	/// </summary>
	CreateSparseResidency = 1,
	/// <summary>
	/// Specifies that the image will be backed using sparse memory binding with memory ranges that might also simultaneously be backing another image (or another portion of the same image). Images created with this flag <b>must</b> also be created with the <see cref="VkImageCreateFlags.CreateSparseBinding">VkImageCreateFlags.CreateSparseBinding</see> flag.
	/// </summary>
	CreateSparseAliased = 2,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView with a different format from the image. For <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#formats-requiring-sampler-ycbcr-conversion">multi-planar</seealso> formats, <see cref="VkImageCreateFlags.CreateMutableFormat">VkImageCreateFlags.CreateMutableFormat</see> specifies that a sname:VkImageView can be created of a <i>plane</i> of the image.
	/// </summary>
	CreateMutableFormat = 3,
	/// <summary>
	/// Specifies that the image <b>can</b> be used to create a sname:VkImageView of type <see cref="VkImageViewType.TypeCube">VkImageViewType.TypeCube</see> or <see cref="VkImageViewType.TypeCube">VkImageViewType.TypeCube</see>_ARRAY.
	/// </summary>
	CreateCubeCompatible = 4,
	/// <summary>
	/// Specifies that the image is a <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#resources-images-corner-sampled">corner-sampled image</seealso>.
	/// </summary>
	CreateCornerSampled = 8192,
	CreateSplitInstanceBindRegionsKhr = 0,
	Create2dArrayCompatibleKhr = 0,
	CreateBlockTexelViewCompatibleKhr = 0,
	CreateExtendedUsageKhr = 0,
	/// <summary>
	/// Specifies that an image with a depth or depth/stencil format <b>can</b> be used with custom sample locations when used as a depth/stencil attachment.
	/// </summary>
	CreateSampleLocationsCompatibleDepthExt = 4096,
	CreateDisjointKhr = 0,
	CreateAliasKhr = 0,
	/// <summary>
	/// Specifies that an image <b>can</b> be in a subsampled format which <b>may</b> be more optimal when written as an attachment by a render pass that has a fragment density map attachment. Accessing a subsampled image has additional considerations:
	/// </summary>
	CreateSubsampledExt = 16384,
	CreateReserved16Amd = 65536,
	CreateReserved394Ext = 131072,
	CreateReserved426Qcom = 32768,
}

[Flags]
public enum VkImageViewCreateFlags
{
	/// <summary>
	/// Specifies that the fragment density map will be read by device during <see cref="VkPipelineStageFlags.FragmentDensityProcessExt">VkPipelineStageFlags.FragmentDensityProcessExt</see>
	/// </summary>
	DynamicExt = 1,
	/// <summary>
	/// Specifies that the fragment density map will be read by the host during flink:vkEndCommandBuffer for the primary command buffer that the render pass is recorded into
	/// </summary>
	DeferredExt = 2,
}

[Flags]
public enum VkSamplerCreateFlags
{
	SubsampledExt = 1,
	/// <summary>
	/// Specifies that the implementation <b>may</b> use approximations when reconstructing a full color value for texture access from a subsampled image.
	/// </summary>
	SubsampledCoarseReconstructionExt = 2,
	Reserved3Amd = 8,
	Reserved2Ext = 4,
}

[Flags]
public enum VkPipelineCreateFlags
{
	/// <summary>
	/// Specifies that the created pipeline will not be optimized. Using this flag <b>may</b> reduce the time taken to create the pipeline.
	/// </summary>
	CreateDisableOptimization = 0,
	/// <summary>
	/// Specifies that the pipeline to be created is allowed to be the parent of a pipeline that will be created in a subsequent pipeline creation call.
	/// </summary>
	CreateAllowDerivatives = 1,
	/// <summary>
	/// Specifies that the pipeline to be created will be a child of a previously created parent pipeline.
	/// </summary>
	CreateDerivative = 2,
	/// <summary>
	/// Specifies that the pipeline will be used with a fragment shading rate attachment.
	/// </summary>
	CreateRenderingFragmentShadingRateAttachmentKhr = 2097152,
	/// <summary>
	/// Backwards-compatible alias containing a typo
	/// </summary>
	RasterizationStateCreateFragmentShadingRateAttachmentKhr = 0,
	/// <summary>
	/// Specifies that the pipeline will be used with a fragment density map attachment.
	/// </summary>
	CreateRenderingFragmentDensityMapAttachmentExt = 4194304,
	/// <summary>
	/// Backwards-compatible alias containing a typo
	/// </summary>
	RasterizationStateCreateFragmentDensityMapAttachmentExt = 0,
	CreateViewIndexFromDeviceIndexKhr = 0,
	CreateDispatchBaseKhr = 0,
	/// <summary>
	/// Specifies that an any-hit shader will always be present when an any-hit shader would be executed. A NULL any-hit shader is an any-hit shader which is effectively ename:VK_SHADER_UNUSED_KHR, such as from a shader group consisting entirely of zeros.
	/// </summary>
	CreateRayTracingNoNullAnyHitShadersKhr = 16384,
	/// <summary>
	/// Specifies that a closest hit shader will always be present when a closest hit shader would be executed. A NULL closest hit shader is a closest hit shader which is effectively ename:VK_SHADER_UNUSED_KHR, such as from a shader group consisting entirely of zeros.
	/// </summary>
	CreateRayTracingNoNullClosestHitShadersKhr = 32768,
	/// <summary>
	/// Specifies that a miss shader will always be present when a miss shader would be executed. A NULL miss shader is a miss shader which is effectively ename:VK_SHADER_UNUSED_KHR, such as from a shader group consisting entirely of zeros.
	/// </summary>
	CreateRayTracingNoNullMissShadersKhr = 65536,
	/// <summary>
	/// Specifies that an intersection shader will always be present when an intersection shader would be executed. A NULL intersection shader is an intersection shader which is effectively ename:VK_SHADER_UNUSED_KHR, such as from a shader group consisting entirely of zeros.
	/// </summary>
	CreateRayTracingNoNullIntersectionShadersKhr = 131072,
	/// <summary>
	/// Specifies that triangle primitives will be skipped during traversal using code:OpTraceRayKHR.
	/// </summary>
	CreateRayTracingSkipTrianglesKhr = 4096,
	/// <summary>
	/// Specifies that AABB primitives will be skipped during traversal using code:OpTraceRayKHR.
	/// </summary>
	CreateRayTracingSkipAabbsKhr = 8192,
	/// <summary>
	/// Specifies that the shader group handles <b>can</b> be saved and reused on a subsequent run (e.g. for trace capture and replay).
	/// </summary>
	CreateRayTracingShaderGroupHandleCaptureReplayKhr = 524288,
	/// <summary>
	/// Specifies that a pipeline is created with all shaders in the deferred state. Before using the pipeline the application <b>must</b> call flink:vkCompileDeferredNV exactly once on each shader in the pipeline before using the pipeline.
	/// </summary>
	CreateDeferCompile = 32,
	/// <summary>
	/// Specifies that the shader compiler should capture statistics for the pipeline executables produced by the compile process which <b>can</b> later be retrieved by calling flink:vkGetPipelineExecutableStatisticsKHR. Enabling this flag <b>must</b> not affect the final compiled pipeline but <b>may</b> disable pipeline caching or otherwise affect pipeline creation time.
	/// </summary>
	CreateCaptureStatisticsKhr = 64,
	/// <summary>
	/// Specifies that the shader compiler should capture the internal representations of pipeline executables produced by the compile process which <b>can</b> later be retrieved by calling flink:vkGetPipelineExecutableInternalRepresentationsKHR. Enabling this flag <b>must</b> not affect the final compiled pipeline but <b>may</b> disable pipeline caching or otherwise affect pipeline creation time.
	/// </summary>
	CreateCaptureInternalRepresentationsKhr = 128,
	/// <summary>
	/// Specifies that the pipeline can be used in combination with <<device-generated-commands>>.
	/// </summary>
	CreateIndirectBindable = 262144,
	/// <summary>
	/// Specifies that the pipeline <b>cannot</b> be used directly, and instead defines a <i>pipeline library</i> that <b>can</b> be combined with other pipelines using the slink:VkPipelineLibraryCreateInfoKHR structure.
	/// </summary>
	CreateLibraryKhr = 2048,
	/// <summary>
	/// Specifies that pipeline creation will fail if a compile is required for
	/// </summary>
	CreateFailOnPipelineCompileRequiredExt = 256,
	CreateEarlyReturnOnFailureExt = 512,
	CreateReserved23Amd = 8388608,
	CreateReserved10Amd = 1024,
	/// <summary>
	/// Specifies that the pipeline is allowed to use code:OpTraceRayMotionNV.
	/// </summary>
	CreateRayTracingAllowMotion = 1048576,
}

[Flags]
public enum VkPipelineShaderStageCreateFlags
{
	Reserved2 = 4,
	/// <summary>
	/// Specifies that the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#interfaces-builtin-variables-sgs">code:SubgroupSize</seealso> <b>may</b> vary in the shader stage.
	/// </summary>
	AllowVaryingSubgroupSizeExt = 1,
	/// <summary>
	/// Specifies that the subgroup sizes <b>must</b> be launched with all invocations active in the compute stage.
	/// </summary>
	RequireFullSubgroupsExt = 2,
	Reserved3Khr = 8,
}

[Flags]
public enum VkColorComponentFlags
{
	R = 0,
	G = 1,
	B = 2,
	A = 3,
}

[Flags]
public enum VkFenceCreateFlags
{
	Signaled = 0,
}

[Flags]
public enum VkSemaphoreCreateFlags
{
	None = 0,
}

[Flags]
public enum VkFormatFeatureFlags
{
	/// <summary>
	/// Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
	/// </summary>
	SampledImage = 0,
	/// <summary>
	/// Format can be used for storage images (STORAGE_IMAGE descriptor type)
	/// </summary>
	StorageImage = 1,
	/// <summary>
	/// Format supports atomic operations in case it is used for storage images
	/// </summary>
	StorageImageAtomic = 2,
	/// <summary>
	/// Format can be used for uniform texel buffers (TBOs)
	/// </summary>
	UniformTexelBuffer = 3,
	/// <summary>
	/// Format can be used for storage texel buffers (IBOs)
	/// </summary>
	StorageTexelBuffer = 4,
	/// <summary>
	/// Format supports atomic operations in case it is used for storage texel buffers
	/// </summary>
	StorageTexelBufferAtomic = 5,
	/// <summary>
	/// Format can be used for vertex buffers (VBOs)
	/// </summary>
	VertexBuffer = 6,
	/// <summary>
	/// Format can be used for color attachment images
	/// </summary>
	ColorAttachment = 7,
	/// <summary>
	/// Format supports blending in case it is used for color attachment images
	/// </summary>
	ColorAttachmentBlend = 8,
	/// <summary>
	/// Format can be used for depth/stencil attachment images
	/// </summary>
	DepthStencilAttachment = 9,
	/// <summary>
	/// Format can be used as the source image of blits with vkCmdBlitImage
	/// </summary>
	BlitSrc = 10,
	/// <summary>
	/// Format can be used as the destination image of blits with vkCmdBlitImage
	/// </summary>
	BlitDst = 11,
	/// <summary>
	/// Format can be filtered with VK_FILTER_LINEAR when being sampled
	/// </summary>
	SampledImageFilterLinear = 12,
	/// <summary>
	/// Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled
	/// </summary>
	SampledImageFilterCubicImg = 8192,
	VideoDecodeOutputKhr = 33554432,
	VideoDecodeDpbKhr = 67108864,
	TransferSrcKhr = 0,
	TransferDstKhr = 0,
	SampledImageFilterMinmaxExt = 0,
	AccelerationStructureVertexBufferKhr = 536870912,
	MidpointChromaSamplesKhr = 0,
	SampledImageYcbcrConversionLinearFilterKhr = 0,
	SampledImageYcbcrConversionSeparateReconstructionFilterKhr = 0,
	SampledImageYcbcrConversionChromaReconstructionExplicitKhr = 0,
	SampledImageYcbcrConversionChromaReconstructionExplicitForceableKhr = 0,
	DisjointKhr = 0,
	CositedChromaSamplesKhr = 0,
	SampledImageFilterCubicExt = 0,
	FragmentDensityMapExt = 16777216,
	FragmentShadingRateAttachmentKhr = 1073741824,
	VideoEncodeInputKhr = 134217728,
	VideoEncodeDpbKhr = 268435456,
}

[Flags]
public enum VkQueryControlFlags
{
	/// <summary>
	/// Specifies the precision of <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#queries-occlusion"> occlusion queries</seealso>.
	/// </summary>
	Precise = 0,
}

[Flags]
public enum VkQueryResultFlags
{
	/// <summary>
	/// Results of the queries are written to the destination buffer as 64-bit values
	/// </summary>
	Result64 = 0,
	/// <summary>
	/// Specifies that Vulkan will wait for each query's status to become available before retrieving its results.
	/// </summary>
	ResultWait = 1,
	/// <summary>
	/// Specifies that the availability status accompanies the results.
	/// </summary>
	ResultWithAvailability = 2,
	/// <summary>
	/// Specifies that returning partial results is acceptable.
	/// </summary>
	ResultPartial = 3,
	/// <summary>
	/// Specifies that the last value returned in the query is a elink:VkQueryResultStatusKHR value.
	/// </summary>
	ResultWithStatusKhr = 16,
}

[Flags]
public enum VkCommandBufferUsageFlags
{
	/// <summary>
	/// Specifies that each recording of the command buffer will only be submitted once, and the command buffer will be reset and recorded again between each submission.
	/// </summary>
	OneTimeSubmit = 0,
	/// <summary>
	/// Specifies that a secondary command buffer is considered to be entirely inside a render pass. If this is a primary command buffer, then this bit is ignored.
	/// </summary>
	RenderPassContinue = 1,
	/// <summary>
	/// Specifies that a command buffer <b>can</b> be resubmitted to a queue while it is in the <i>pending state</i>, and recorded into multiple primary command buffers.
	/// </summary>
	SimultaneousUse = 2,
}

[Flags]
public enum VkQueryPipelineStatisticFlags
{
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of vertices processed by the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#drawing">input assembly</seealso> stage. Vertices corresponding to incomplete primitives <b>may</b> contribute to the count.
	/// </summary>
	InputAssemblyVertices = 0,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of primitives processed by the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#drawing">input assembly</seealso> stage. If primitive restart is enabled, restarting the primitive topology has no effect on the count. Incomplete primitives <b>may</b> be counted.
	/// </summary>
	InputAssemblyPrimitives = 1,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of vertex shader invocations. This counter's value is incremented each time a vertex shader is <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#shaders-vertex-execution">invoked</seealso>.
	/// </summary>
	VertexShaderInvocations = 2,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of geometry shader invocations. This counter's value is incremented each time a geometry shader is <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#shaders-geometry-execution">invoked>>. In the case of <<geometry-invocations,instanced geometry shaders</seealso>, the geometry shader invocations count is incremented for each separate instanced invocation.
	/// </summary>
	GeometryShaderInvocations = 3,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of primitives generated by geometry shader invocations. The counter's value is incremented each time the geometry shader emits a primitive. Restarting primitive topology using the SPIR-V instructions code:OpEndPrimitive or code:OpEndStreamPrimitive has no effect on the geometry shader output primitives count.
	/// </summary>
	GeometryShaderPrimitives = 4,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of primitives processed by the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#vertexpostproc-clipping">Primitive Clipping</seealso> stage of the pipeline. The counter's value is incremented each time a primitive reaches the primitive clipping stage.
	/// </summary>
	ClippingInvocations = 5,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of primitives output by the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#vertexpostproc-clipping">Primitive Clipping</seealso> stage of the pipeline. The counter's value is incremented each time a primitive passes the primitive clipping stage. The actual number of primitives output by the primitive clipping stage for a particular input primitive is implementation-dependent but <b>must</b> satisfy the following conditions:
	/// </summary>
	ClippingPrimitives = 6,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of fragment shader invocations. The counter's value is incremented each time the fragment shader is <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#fragops-shader">invoked</seealso>.
	/// </summary>
	FragmentShaderInvocations = 7,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of patches processed by the tessellation control shader. The counter's value is incremented once for each patch for which a tessellation control shader is <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#shaders-tessellation-control-execution">invoked</seealso>.
	/// </summary>
	TessellationControlShaderPatches = 8,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of invocations of the tessellation evaluation shader. The counter's value is incremented each time the tessellation evaluation shader is <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#shaders-tessellation-evaluation-execution">invoked</seealso>.
	/// </summary>
	TessellationEvaluationShaderInvocations = 9,
	/// <summary>
	/// Specifies that queries managed by the pool will count the number of compute shader invocations. The counter's value is incremented every time the compute shader is invoked. Implementations <b>may</b> skip the execution of certain compute shader invocations or execute additional compute shader invocations for implementation-dependent reasons as long as the results of rendering otherwise remain unchanged.
	/// </summary>
	ComputeShaderInvocations = 10,
}

[Flags]
public enum VkImageAspectFlags
{
	/// <summary>
	/// Specifies the color aspect.
	/// </summary>
	Color = 0,
	/// <summary>
	/// Specifies the depth aspect.
	/// </summary>
	Depth = 1,
	/// <summary>
	/// Specifies the stencil aspect.
	/// </summary>
	Stencil = 2,
	/// <summary>
	/// Specifies the metadata aspect, used for <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#sparsememory"> sparse resource</seealso> operations.
	/// </summary>
	Metadata = 3,
	Plane0Khr = 0,
	Plane1Khr = 0,
	Plane2Khr = 0,
	MemoryPlane0Ext = 128,
	MemoryPlane1Ext = 256,
	MemoryPlane2Ext = 512,
	MemoryPlane3Ext = 1024,
}

[Flags]
public enum VkSparseImageFormatFlags
{
	/// <summary>
	/// Image uses a single mip tail region for all array layers
	/// </summary>
	SingleMiptail = 0,
	/// <summary>
	/// Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
	/// </summary>
	AlignedMipSize = 1,
	/// <summary>
	/// Image uses a non-standard sparse image block dimensions
	/// </summary>
	NonstandardBlockSize = 2,
}

[Flags]
public enum VkSparseMemoryBindFlags
{
	/// <summary>
	/// Operation binds resource metadata to memory
	/// </summary>
	Metadata = 0,
}

[Flags]
public enum VkPipelineStageFlags
{
	/// <summary>
	/// Before subsequent commands are processed
	/// </summary>
	TopOfPipe = 0,
	/// <summary>
	/// Draw/DispatchIndirect command fetch
	/// </summary>
	DrawIndirect = 1,
	/// <summary>
	/// Vertex/index fetch
	/// </summary>
	VertexInput = 2,
	/// <summary>
	/// Vertex shading
	/// </summary>
	VertexShader = 3,
	/// <summary>
	/// Tessellation control shading
	/// </summary>
	TessellationControlShader = 4,
	/// <summary>
	/// Tessellation evaluation shading
	/// </summary>
	TessellationEvaluationShader = 5,
	/// <summary>
	/// Geometry shading
	/// </summary>
	GeometryShader = 6,
	/// <summary>
	/// Fragment shading
	/// </summary>
	FragmentShader = 7,
	/// <summary>
	/// Early fragment (depth and stencil) tests
	/// </summary>
	EarlyFragmentTests = 8,
	/// <summary>
	/// Late fragment (depth and stencil) tests
	/// </summary>
	LateFragmentTests = 9,
	/// <summary>
	/// Color attachment writes
	/// </summary>
	ColorAttachmentOutput = 10,
	/// <summary>
	/// Compute shading
	/// </summary>
	ComputeShader = 11,
	/// <summary>
	/// Transfer/copy operations
	/// </summary>
	Transfer = 12,
	/// <summary>
	/// After previous commands have completed
	/// </summary>
	BottomOfPipe = 13,
	/// <summary>
	/// Indicates host (CPU) is a source/sink of the dependency
	/// </summary>
	Host = 14,
	/// <summary>
	/// All stages of the graphics pipeline
	/// </summary>
	AllGraphics = 15,
	/// <summary>
	/// All stages supported on the queue
	/// </summary>
	AllCommands = 16,
	TransformFeedbackExt = 16777216,
	/// <summary>
	/// A pipeline stage for conditional rendering predicate fetch
	/// </summary>
	ConditionalRenderingExt = 262144,
	AccelerationStructureBuildKhr = 33554432,
	RayTracingShaderKhr = 2097152,
	ShadingRateImage = 0,
	RayTracingShader = 0,
	AccelerationStructureBuild = 0,
	TaskShader = 524288,
	MeshShader = 1048576,
	FragmentDensityProcessExt = 8388608,
	FragmentShadingRateAttachmentKhr = 4194304,
	CommandPreprocess = 131072,
	NoneKhr = 0,
}

[Flags]
public enum VkCommandPoolCreateFlags
{
	/// <summary>
	/// Specifies that command buffers allocated from the pool will be short-lived, meaning that they will be reset or freed in a relatively short timeframe. This flag <b>may</b> be used by the implementation to control memory allocation behavior within the pool.
	/// </summary>
	Transient = 0,
	/// <summary>
	/// Allows any command buffer allocated from a pool to be individually reset to the
	/// </summary>
	ResetCommandBuffer = 1,
}

[Flags]
public enum VkCommandPoolResetFlags
{
	/// <summary>
	/// Specifies that resetting a command pool recycles all of the resources from the command pool back to the system.
	/// </summary>
	ReleaseResources = 0,
}

[Flags]
public enum VkCommandBufferResetFlags
{
	/// <summary>
	/// Specifies that most or all memory resources currently owned by the command buffer <b>should</b> be returned to the parent command pool. If this flag is not set, then the command buffer <b>may</b> hold onto memory resources and reuse them when recording commands. pname:commandBuffer is moved to the <seealso href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#commandbuffers-lifecycle"> initial state</seealso>.
	/// </summary>
	ReleaseResources = 0,
}

[Flags]
public enum VkSampleCountFlags
{
	/// <summary>
	/// Sample count 1 supported
	/// </summary>
	Count1 = 0,
	/// <summary>
	/// Sample count 2 supported
	/// </summary>
	Count2 = 1,
	/// <summary>
	/// Sample count 4 supported
	/// </summary>
	Count4 = 2,
	/// <summary>
	/// Sample count 8 supported
	/// </summary>
	Count8 = 3,
	/// <summary>
	/// Sample count 16 supported
	/// </summary>
	Count16 = 4,
	/// <summary>
	/// Sample count 32 supported
	/// </summary>
	Count32 = 5,
	/// <summary>
	/// Sample count 64 supported
	/// </summary>
	Count64 = 6,
}

[Flags]
public enum VkAttachmentDescriptionFlags
{
	/// <summary>
	/// The attachment may alias physical memory of another attachment in the same render pass
	/// </summary>
	MayAlias = 0,
}

[Flags]
public enum VkStencilFaceFlags
{
	/// <summary>
	/// Specifies that only the front set of stencil state is updated.
	/// </summary>
	FaceFront = 0,
	/// <summary>
	/// Specifies that only the back set of stencil state is updated.
	/// </summary>
	FaceBack = 1,
	/// <summary>
	/// Is the combination of <see cref="VkStencilFaceFlags.FaceFront">VkStencilFaceFlags.FaceFront</see> and <see cref="VkStencilFaceFlags.FaceBack">VkStencilFaceFlags.FaceBack</see>, and specifies that both sets of stencil state are updated.
	/// </summary>
	FaceFrontAndBack = 0x00000003,
}

[Flags]
public enum VkDescriptorPoolCreateFlags
{
	/// <summary>
	/// Specifies that descriptor sets <b>can</b> return their individual allocations to the pool, i.e. all of flink:vkAllocateDescriptorSets, flink:vkFreeDescriptorSets, and flink:vkResetDescriptorPool are allowed. Otherwise, descriptor sets allocated from the pool <b>must</b> not be individually freed back to the pool, i.e. only flink:vkAllocateDescriptorSets and flink:vkResetDescriptorPool are allowed.
	/// </summary>
	FreeDescriptorSet = 0,
	UpdateAfterBindExt = 0,
	/// <summary>
	/// Specifies that this descriptor pool and the descriptor sets allocated from it reside entirely in host memory and cannot be bound. Descriptor sets allocated from this pool are partially exempt from the external synchronization requirement in
	/// </summary>
	HostOnlyValve = 4,
}

[Flags]
public enum VkDependencyFlags
{
	/// <summary>
	/// Dependency is per pixel region 
	/// </summary>
	ByRegion = 0,
	ViewLocalKhr = 0,
	DeviceGroupKhr = 0,
}

public enum VkSemaphoreType
{
	Binary = 0,
	Timeline = 1,
	BinaryKhr = 0,
	TimelineKhr = 0,
}

[Flags]
public enum VkSemaphoreWaitFlags
{
	Bit = 0,
	Khr = 0,
}

public enum VkPresentMode
{
	ImmediateKhr = 0,
	MailboxKhr = 1,
	FifoKhr = 2,
	FifoRelaxedKhr = 3,
	SharedDemandRefreshKhr = 1000111000,
	SharedContinuousRefreshKhr = 1000111001,
}

public enum VkColorSpace
{
	SpaceSRgbNonlinearKhr = 0,
	SpaceDisplayP3NonlinearExt = 1000104001,
	SpaceExtendedSRgbLinearExt = 1000104002,
	SpaceDisplayP3LinearExt = 1000104003,
	SpaceDciP3NonlinearExt = 1000104004,
	SpaceBt709LinearExt = 1000104005,
	SpaceBt709NonlinearExt = 1000104006,
	SpaceBt2020LinearExt = 1000104007,
	SpaceHdr10St2084Ext = 1000104008,
	SpaceDolbyvisionExt = 1000104009,
	SpaceHdr10HlgExt = 1000104010,
	SpaceAdobergbLinearExt = 1000104011,
	SpaceAdobergbNonlinearExt = 1000104012,
	SpacePassThroughExt = 1000104013,
	SpaceExtendedSRgbNonlinearExt = 1000104014,
	/// <summary>
	/// Backwards-compatible alias containing a typo
	/// </summary>
	SpaceDciP3LinearExt = 0,
	SpaceDisplayNativeAmd = 1000213000,
}

[Flags]
public enum VkDisplayPlaneAlphaFlags
{
	OpaqueKhr = 0,
	GlobalKhr = 1,
	PerPixelKhr = 2,
	PerPixelPremultipliedKhr = 3,
}

[Flags]
public enum VkCompositeAlphaFlags
{
	OpaqueKhr = 0,
	PreMultipliedKhr = 1,
	PostMultipliedKhr = 2,
	InheritKhr = 3,
}

[Flags]
public enum VkSurfaceTransformFlags
{
	IdentityKhr = 0,
	Rotate90Khr = 1,
	Rotate180Khr = 2,
	Rotate270Khr = 3,
	HorizontalMirrorKhr = 4,
	HorizontalMirrorRotate90Khr = 5,
	HorizontalMirrorRotate180Khr = 6,
	HorizontalMirrorRotate270Khr = 7,
	InheritKhr = 8,
}

[Flags]
public enum VkSwapchainImageUsageFlagsANDROID
{
	SharedAndroid = 0,
}

public enum VkTimeDomain
{
	DeviceExt = 0,
	ClockMonotonicExt = 1,
	ClockMonotonicRawExt = 2,
	QueryPerformanceCounterExt = 3,
}

[Flags]
public enum VkDebugReportFlags
{
	InformationExt = 0,
	WarningExt = 1,
	PerformanceWarningExt = 2,
	ErrorExt = 3,
	DebugExt = 4,
}

public enum VkDebugReportObjectType
{
	UnknownExt = 0,
	InstanceExt = 1,
	PhysicalDeviceExt = 2,
	DeviceExt = 3,
	QueueExt = 4,
	SemaphoreExt = 5,
	CommandBufferExt = 6,
	FenceExt = 7,
	DeviceMemoryExt = 8,
	BufferExt = 9,
	ImageExt = 10,
	EventExt = 11,
	QueryPoolExt = 12,
	BufferViewExt = 13,
	ImageViewExt = 14,
	ShaderModuleExt = 15,
	PipelineCacheExt = 16,
	PipelineLayoutExt = 17,
	RenderPassExt = 18,
	PipelineExt = 19,
	DescriptorSetLayoutExt = 20,
	SamplerExt = 21,
	DescriptorPoolExt = 22,
	DescriptorSetExt = 23,
	FrameBufferExt = 24,
	CommandPoolExt = 25,
	SurfaceKhrExt = 26,
	SwapchainKhrExt = 27,
	DebugReportCallbackExtExt = 28,
	DisplayKhrExt = 29,
	DisplayModeKhrExt = 30,
	ValidationCacheExtExt = 33,
	SamplerYcbcrConversionExt = 1000011000,
	DescriptorUpdateTemplateExt = 1000011000,
	CuModulexExt = 1000029000,
	CuFunctionxExt = 1000029001,
	DescriptorUpdateTemplateKhrExt = 0,
	AccelerationStructureKhrExt = 1000150000,
	SamplerYcbcrConversionKhrExt = 0,
	AccelerationStructureExt = 1000165000,
	BufferCollectionFuchsiaExt = 1000366000,
}

public enum VkDeviceMemoryReportEventType
{
	AllocateExt = 0,
	FreeExt = 1,
	ImportExt = 2,
	UnimportExt = 3,
	AllocationFailedExt = 4,
}

public enum VkRasterizationOrderAMD
{
	StrictAmd = 0,
	RelaxedAmd = 1,
}

[Flags]
public enum VkExternalMemoryHandleTypeFlagsNV
{
	OpaqueWin32 = 0,
	OpaqueWin32Kmt = 1,
	D3d11Image = 2,
	D3d11ImageKmt = 3,
}

[Flags]
public enum VkExternalMemoryFeatureFlagsNV
{
	DedicatedOnly = 0,
	Exportable = 1,
	Importable = 2,
}

public enum VkValidationCheck
{
	AllExt = 0,
	ShadersExt = 1,
}

public enum VkValidationFeatureEnable
{
	GpuAssistedExt = 0,
	GpuAssistedReserveBindingSlotExt = 1,
	BestPracticesExt = 2,
	DebugPrintfExt = 3,
	SynchronizationValidationExt = 4,
}

public enum VkValidationFeatureDisable
{
	AllExt = 0,
	ShadersExt = 1,
	ThreadSafetyExt = 2,
	ApiParametersExt = 3,
	ObjectLifetimesExt = 4,
	CoreChecksExt = 5,
	UniqueHandlesExt = 6,
	ShaderValidationCacheExt = 7,
}

[Flags]
public enum VkSubgroupFeatureFlags
{
	/// <summary>
	/// Basic subgroup operations
	/// </summary>
	Basic = 0,
	/// <summary>
	/// Vote subgroup operations
	/// </summary>
	Vote = 1,
	/// <summary>
	/// Arithmetic subgroup operations
	/// </summary>
	Arithmetic = 2,
	/// <summary>
	/// Ballot subgroup operations
	/// </summary>
	Ballot = 3,
	/// <summary>
	/// Shuffle subgroup operations
	/// </summary>
	Shuffle = 4,
	/// <summary>
	/// Shuffle relative subgroup operations
	/// </summary>
	ShuffleRelative = 5,
	/// <summary>
	/// Clustered subgroup operations
	/// </summary>
	Clustered = 6,
	/// <summary>
	/// Quad subgroup operations
	/// </summary>
	Quad = 7,
	Partitioned = 256,
}

[Flags]
public enum VkIndirectCommandsLayoutUsageFlagsNV
{
	ExplicitPreprocess = 0,
	IndexedSequences = 1,
	UnorderedSequences = 2,
}

[Flags]
public enum VkIndirectStateFlagsNV
{
	FlagFrontFace = 0,
}

public enum VkIndirectCommandsTokenTypeNV
{
	ShaderGroup = 0,
	StateFlags = 1,
	IndexBuffer = 2,
	VertexBuffer = 3,
	PushConstant = 4,
	DrawIndexed = 5,
	Draw = 6,
	DrawTasks = 7,
}

[Flags]
public enum VkPrivateDataSlotCreateFlags
{
	None = 0,
}

[Flags]
public enum VkDescriptorSetLayoutCreateFlags
{
	/// <summary>
	/// Specifies that descriptor sets <b>must</b> not be allocated using this layout, and descriptors are instead pushed by flink:vkCmdPushDescriptorSetKHR.
	/// </summary>
	PushDescriptorKhr = 1,
	UpdateAfterBindPoolExt = 0,
	Reserved4Amd = 16,
	Reserved3Amd = 8,
	/// <summary>
	/// Specifies that descriptor sets using this layout <b>must</b> be allocated from a descriptor pool created with the <see cref="VkDescriptorPoolCreateFlags.HostOnlyValve">VkDescriptorPoolCreateFlags.HostOnlyValve</see> bit set. Descriptor set layouts created with this bit have no expressable limit for maximum number of descriptors per-stage. Host descriptor sets are limited only by available host memory, but <b>may</b> be limited for implementation specific reasons.
	/// </summary>
	HostOnlyPoolValve = 4,
}

[Flags]
public enum VkExternalMemoryHandleTypeFlags
{
	OpaqueFd = 0,
	OpaqueWin32 = 1,
	OpaqueWin32Kmt = 2,
	D3d11Texture = 3,
	D3d11TextureKmt = 4,
	D3d12Heap = 5,
	D3d12Resource = 6,
	OpaqueFdKhr = 0,
	OpaqueWin32Khr = 0,
	OpaqueWin32KmtKhr = 0,
	D3d11TextureKhr = 0,
	D3d11TextureKmtKhr = 0,
	D3d12HeapKhr = 0,
	D3d12ResourceKhr = 0,
	DmaBufExt = 512,
	AndroidHardwareBufferAndroid = 1024,
	HostAllocationExt = 128,
	HostMappedForeignMemoryExt = 256,
	ZirconVmoFuchsia = 2048,
	RdmaAddress = 4096,
	Reserved13 = 8192,
}

[Flags]
public enum VkExternalMemoryFeatureFlags
{
	DedicatedOnly = 0,
	Exportable = 1,
	Importable = 2,
	DedicatedOnlyKhr = 0,
	ExportableKhr = 0,
	ImportableKhr = 0,
}

[Flags]
public enum VkExternalSemaphoreHandleTypeFlags
{
	OpaqueFd = 0,
	OpaqueWin32 = 1,
	OpaqueWin32Kmt = 2,
	D3d12Fence = 3,
	SyncFd = 4,
	OpaqueFdKhr = 0,
	OpaqueWin32Khr = 0,
	OpaqueWin32KmtKhr = 0,
	D3d12FenceKhr = 0,
	SyncFdKhr = 0,
	ZirconEventFuchsia = 128,
	Reserved5 = 32,
	Reserved6 = 64,
}

[Flags]
public enum VkExternalSemaphoreFeatureFlags
{
	Exportable = 0,
	Importable = 1,
	ExportableKhr = 0,
	ImportableKhr = 0,
}

[Flags]
public enum VkSemaphoreImportFlags
{
	Bit = 0,
	Khr = 0,
}

[Flags]
public enum VkExternalFenceHandleTypeFlags
{
	OpaqueFd = 0,
	OpaqueWin32 = 1,
	OpaqueWin32Kmt = 2,
	SyncFd = 3,
	OpaqueFdKhr = 0,
	OpaqueWin32Khr = 0,
	OpaqueWin32KmtKhr = 0,
	SyncFdKhr = 0,
	Reserved4 = 16,
	Reserved5 = 32,
}

[Flags]
public enum VkExternalFenceFeatureFlags
{
	Exportable = 0,
	Importable = 1,
	ExportableKhr = 0,
	ImportableKhr = 0,
}

[Flags]
public enum VkFenceImportFlags
{
	Bit = 0,
	Khr = 0,
}

[Flags]
public enum VkSurfaceCounterFlags
{
	Ext = 0,
}

public enum VkDisplayPowerState
{
	OffExt = 0,
	SuspendExt = 1,
	OnExt = 2,
}

public enum VkDeviceEventType
{
	DisplayHotplugExt = 0,
}

public enum VkDisplayEventType
{
	FirstPixelOutExt = 0,
}

[Flags]
public enum VkPeerMemoryFeatureFlags
{
	/// <summary>
	/// Can read with vkCmdCopy commands
	/// </summary>
	CopySrc = 0,
	/// <summary>
	/// Can write with vkCmdCopy commands
	/// </summary>
	CopyDst = 1,
	/// <summary>
	/// Can read with any access type/command
	/// </summary>
	GenericSrc = 2,
	/// <summary>
	/// Can write with and access type/command
	/// </summary>
	GenericDst = 3,
	CopySrcKhr = 0,
	CopyDstKhr = 0,
	GenericSrcKhr = 0,
	GenericDstKhr = 0,
}

[Flags]
public enum VkMemoryAllocateFlags
{
	/// <summary>
	/// Force allocation on specific devices
	/// </summary>
	Mask = 0,
	MaskKhr = 0,
	AddressKhr = 0,
	AddressCaptureReplayKhr = 0,
}

[Flags]
public enum VkDeviceGroupPresentModeFlags
{
	/// <summary>
	/// Present from local memory
	/// </summary>
	LocalKhr = 0,
	/// <summary>
	/// Present from remote memory
	/// </summary>
	RemoteKhr = 1,
	/// <summary>
	/// Present sum of local and/or remote memory
	/// </summary>
	SumKhr = 2,
	/// <summary>
	/// Each physical device presents from local memory
	/// </summary>
	LocalMultiDeviceKhr = 3,
}

[Flags]
public enum VkSwapchainCreateFlags
{
	/// <summary>
	/// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
	/// </summary>
	SplitInstanceBindRegionsKhr = 1,
	/// <summary>
	/// Swapchain is protected
	/// </summary>
	ProtectedKhr = 2,
	MutableFormatKhr = 4,
}

public enum VkViewportCoordinateSwizzleNV
{
	PositiveX = 0,
	NegativeX = 1,
	PositiveY = 2,
	NegativeY = 3,
	PositiveZ = 4,
	NegativeZ = 5,
	PositiveW = 6,
	NegativeW = 7,
}

public enum VkDiscardRectangleMode
{
	/// <summary>
	/// Specifies that the discard rectangle test is inclusive.
	/// </summary>
	InclusiveExt = 0,
	/// <summary>
	/// Specifies that the discard rectangle test is exclusive.
	/// </summary>
	ExclusiveExt = 1,
}

[Flags]
public enum VkSubpassDescriptionFlags
{
	PerViewAttributesx = 1,
	PerViewPositionXOnlyx = 2,
	FragmentRegionQcom = 4,
	ShaderResolveQcom = 8,
	RasterizationOrderAttachmentColorAccessArm = 16,
	RasterizationOrderAttachmentDepthAccessArm = 32,
	RasterizationOrderAttachmentStencilAccessArm = 64,
}

public enum VkPointClippingBehavior
{
	AllClipPlanes = 0,
	UserClipPlanesOnly = 1,
	AllClipPlanesKhr = 0,
	UserClipPlanesOnlyKhr = 0,
}

public enum VkSamplerReductionMode
{
	WeightedAverage = 0,
	Min = 1,
	Max = 2,
	WeightedAverageExt = 0,
	MinExt = 0,
	MaxExt = 0,
}

public enum VkTessellationDomainOrigin
{
	UpperLeft = 0,
	LowerLeft = 1,
	UpperLeftKhr = 0,
	LowerLeftKhr = 0,
}

public enum VkSamplerYcbcrModelConversion
{
	/// <summary>
	/// Specifies that the input values to the conversion are unmodified.
	/// </summary>
	RgbIdentity = 0,
	/// <summary>
	/// Specifies no
	/// </summary>
	YcbcrIdentity = 1,
	/// <summary>
	/// aka HD YUV
	/// </summary>
	Ycbcr709 = 2,
	/// <summary>
	/// aka SD YUV
	/// </summary>
	Ycbcr601 = 3,
	/// <summary>
	/// aka UHD YUV
	/// </summary>
	Ycbcr2020 = 4,
	RgbIdentityKhr = 0,
	YcbcrIdentityKhr = 0,
	Ycbcr709Khr = 0,
	Ycbcr601Khr = 0,
	Ycbcr2020Khr = 0,
}

public enum VkSamplerYcbcrRange
{
	/// <summary>
	/// Specifies that the full range of
	/// </summary>
	Full = 0,
	/// <summary>
	/// Specifies that headroom and foot room are reserved in the numerical range of encoded values, and the
	/// </summary>
	Narrow = 1,
	FullKhr = 0,
	NarrowKhr = 0,
}

public enum VkChromaLocation
{
	/// <summary>
	/// Specifies that downsampled chroma samples are aligned with luma samples with even coordinates.
	/// </summary>
	CositedEven = 0,
	/// <summary>
	/// Specifies that downsampled chroma samples are located half way between each even luma sample and the nearest higher odd luma sample.
	/// </summary>
	Midpoint = 1,
	CositedEvenKhr = 0,
	MidpointKhr = 0,
}

public enum VkBlendOverlap
{
	UncorrelatedExt = 0,
	DisjointExt = 1,
	ConjointExt = 2,
}

public enum VkCoverageModulationModeNV
{
	/// <summary>
	/// Specifies that no components are multiplied by the modulation factor.
	/// </summary>
	None = 0,
	/// <summary>
	/// Specifies that the red, green, and blue components are multiplied by the modulation factor.
	/// </summary>
	Rgb = 1,
	/// <summary>
	/// Specifies that the alpha component is multiplied by the modulation factor.
	/// </summary>
	Alpha = 2,
	/// <summary>
	/// Specifies that all components are multiplied by the modulation factor.
	/// </summary>
	Rgba = 3,
}

public enum VkCoverageReductionModeNV
{
	/// <summary>
	/// Specifies that each color sample will be associated with an implementation-dependent subset of samples in the pixel coverage. If any of those associated samples are covered, the color sample is covered.
	/// </summary>
	Merge = 0,
	/// <summary>
	/// Specifies that for color samples present in the color attachments, a color sample is covered if the pixel coverage sample with the same
	/// </summary>
	Truncate = 1,
}

public enum VkValidationCacheHeaderVersion
{
	OneExt = 1,
}

public enum VkShaderInfoTypeAMD
{
	StatisticsAmd = 0,
	BinaryAmd = 1,
	DisassemblyAmd = 2,
}

public enum VkQueueGlobalPriority
{
	LowExt = 128,
	MediumExt = 256,
	HighExt = 512,
	RealtimeExt = 1024,
}

[Flags]
public enum VkDebugUtilsMessageSeverityFlags
{
	VerboseExt = 0,
	InfoExt = 4,
	WarningExt = 8,
	ErrorExt = 12,
}

[Flags]
public enum VkDebugUtilsMessageTypeFlags
{
	GeneralExt = 0,
	ValidationExt = 1,
	PerformanceExt = 2,
}

public enum VkConservativeRasterizationMode
{
	DisabledExt = 0,
	OverestimateExt = 1,
	UnderestimateExt = 2,
}

[Flags]
public enum VkDescriptorBindingFlags
{
	UpdateAfterBind = 0,
	UpdateUnusedWhilePending = 1,
	PartiallyBound = 2,
	VariableDescriptorCount = 3,
	UpdateAfterBindExt = 0,
	UpdateUnusedWhilePendingExt = 0,
	PartiallyBoundExt = 0,
	VariableDescriptorCountExt = 0,
	Reserved4Qcom = 16,
}

public enum VkVendorId
{
	/// <summary>
	/// Vivante vendor ID
	/// </summary>
	Viv = 0x10001,
	/// <summary>
	/// VeriSilicon vendor ID
	/// </summary>
	Vsi = 0x10002,
	/// <summary>
	/// Kazan Software Renderer
	/// </summary>
	Kazan = 0x10003,
	/// <summary>
	/// Codeplay Software Ltd. vendor ID
	/// </summary>
	Codeplay = 0x10004,
	/// <summary>
	/// Mesa vendor ID
	/// </summary>
	Mesa = 0x10005,
	/// <summary>
	/// PoCL vendor ID
	/// </summary>
	Pocl = 0x10006,
}

public enum VkDriverId
{
	/// <summary>
	/// Advanced Micro Devices, Inc.
	/// </summary>
	AmdProprietary = 1,
	/// <summary>
	/// Advanced Micro Devices, Inc.
	/// </summary>
	AmdOpenSource = 2,
	/// <summary>
	/// Mesa open source project
	/// </summary>
	MesaRadv = 3,
	/// <summary>
	/// NVIDIA Corporation
	/// </summary>
	idiaProprietary = 4,
	/// <summary>
	/// Intel Corporation
	/// </summary>
	IntelProprietaryWindows = 5,
	/// <summary>
	/// Intel Corporation
	/// </summary>
	IntelOpenSourceMesa = 6,
	/// <summary>
	/// Imagination Technologies
	/// </summary>
	ImaginationProprietary = 7,
	/// <summary>
	/// Qualcomm Technologies, Inc.
	/// </summary>
	QualcommProprietary = 8,
	/// <summary>
	/// Arm Limited
	/// </summary>
	ArmProprietary = 9,
	/// <summary>
	/// Google LLC
	/// </summary>
	GoogleSwiftShader = 10,
	/// <summary>
	/// Google LLC
	/// </summary>
	GgpProprietary = 11,
	/// <summary>
	/// Broadcom Inc.
	/// </summary>
	BroadcomProprietary = 12,
	/// <summary>
	/// Mesa
	/// </summary>
	MesaLlvmpipe = 13,
	/// <summary>
	/// MoltenVK
	/// </summary>
	MoltenVk = 14,
	/// <summary>
	/// Core Avionics & Industrial Inc.
	/// </summary>
	CoreAviProprietary = 15,
	/// <summary>
	/// Juice Technologies, Inc.
	/// </summary>
	JuiceProprietary = 16,
	/// <summary>
	/// Verisilicon, Inc.
	/// </summary>
	VerisiliconProprietary = 17,
	/// <summary>
	/// Mesa open source project
	/// </summary>
	MesaTurnip = 18,
	/// <summary>
	/// Mesa open source project
	/// </summary>
	MesaV3dv = 19,
	/// <summary>
	/// Mesa open source project
	/// </summary>
	MesaPanvk = 20,
	/// <summary>
	/// Samsung Electronics Co., Ltd.
	/// </summary>
	SamsungProprietary = 21,
	AmdProprietaryKhr = 0,
	AmdOpenSourceKhr = 0,
	MesaRadvKhr = 0,
	idiaProprietaryKhr = 0,
	IntelProprietaryWindowsKhr = 0,
	IntelOpenSourceMesaKhr = 0,
	ImaginationProprietaryKhr = 0,
	QualcommProprietaryKhr = 0,
	ArmProprietaryKhr = 0,
	GoogleSwiftShaderKhr = 0,
	GgpProprietaryKhr = 0,
	BroadcomProprietaryKhr = 0,
}

[Flags]
public enum VkConditionalRenderingFlags
{
	InvertedExt = 0,
}

[Flags]
public enum VkResolveModeFlags
{
	None = 0,
	SampleZero = 0,
	Average = 1,
	Min = 2,
	Max = 3,
	NoneKhr = 0,
	SampleZeroKhr = 0,
	AverageKhr = 0,
	MinKhr = 0,
	MaxKhr = 0,
}

public enum VkShadingRatePaletteEntryNV
{
	EntryNoInvocations = 0,
	Entry16InvocationsPerPixel = 1,
	Entry8InvocationsPerPixel = 2,
	Entry4InvocationsPerPixel = 3,
	Entry2InvocationsPerPixel = 4,
	Entry1InvocationPerPixel = 5,
	Entry1InvocationPer2x1Pixels = 6,
	Entry1InvocationPer1x2Pixels = 7,
	Entry1InvocationPer2x2Pixels = 8,
	Entry1InvocationPer4x2Pixels = 9,
	Entry1InvocationPer2x4Pixels = 10,
	Entry1InvocationPer4x4Pixels = 11,
}

public enum VkCoarseSampleOrderTypeNV
{
	Default = 0,
	Custom = 1,
	PixelMajor = 2,
	SampleMajor = 3,
}

[Flags]
public enum VkGeometryInstanceFlags
{
	TriangleFacingCullDisableKhr = 0,
	TriangleFlipFacingKhr = 1,
	ForceOpaqueKhr = 2,
	ForceNoOpaqueKhr = 3,
	TriangleCullDisable = 0,
	TriangleFrontCounterclockwise = 0,
	ForceOpaque = 0,
	ForceNoOpaque = 0,
}

[Flags]
public enum VkGeometryFlags
{
	OpaqueKhr = 0,
	NoDuplicateAnyHitInvocationKhr = 1,
	Opaque = 0,
	NoDuplicateAnyHitInvocation = 0,
}

[Flags]
public enum VkBuildAccelerationStructureFlags
{
	AllowUpdateKhr = 0,
	AllowCompactionKhr = 1,
	PreferFastTraceKhr = 2,
	PreferFastBuildKhr = 3,
	LowMemoryKhr = 4,
	AllowUpdate = 0,
	AllowCompaction = 0,
	PreferFastTrace = 0,
	PreferFastBuild = 0,
	LowMemory = 0,
	Motion = 32,
}

[Flags]
public enum VkAccelerationStructureCreateFlags
{
	/// <summary>
	/// Specifies that the acceleration structure's address <b>can</b> be saved and reused on a subsequent run.
	/// </summary>
	DeviceAddressCaptureReplayKhr = 0,
	Motion = 4,
}

public enum VkCopyAccelerationStructureMode
{
	CloneKhr = 0,
	CompactKhr = 1,
	SerializeKhr = 2,
	DeserializeKhr = 3,
	Clone = 0,
	Compact = 0,
}

public enum VkBuildAccelerationStructureMode
{
	BuildKhr = 0,
	UpdateKhr = 1,
}

public enum VkAccelerationStructureType
{
	TopLevelKhr = 0,
	BottomLevelKhr = 1,
	GenericKhr = 2,
	TopLevel = 0,
	BottomLevel = 0,
}

public enum VkGeometryType
{
	TrianglesKhr = 0,
	AabbsKhr = 1,
	InstancesKhr = 2,
	Triangles = 0,
	Aabbs = 0,
}

public enum VkAccelerationStructureMemoryRequirementsTypeNV
{
	/// <summary>
	/// Requests the memory requirement for the sname:VkAccelerationStructureNV backing store.
	/// </summary>
	Object = 0,
	/// <summary>
	/// Requests the memory requirement for scratch space during the initial build.
	/// </summary>
	BuildScratch = 1,
	/// <summary>
	/// Requests the memory requirement for scratch space during an update.--
	/// </summary>
	UpdateScratch = 2,
}

public enum VkAccelerationStructureBuildType
{
	/// <summary>
	/// Requests the memory requirement for operations performed by the host.
	/// </summary>
	HostKhr = 0,
	/// <summary>
	/// Requests the memory requirement for operations performed by the device.
	/// </summary>
	DeviceKhr = 1,
	/// <summary>
	/// Requests the memory requirement for operations performed by either the host, or the device.--
	/// </summary>
	HostOrDeviceKhr = 2,
}

public enum VkRayTracingShaderGroupType
{
	GeneralKhr = 0,
	TrianglesHitGroupKhr = 1,
	ProceduralHitGroupKhr = 2,
	General = 0,
	TrianglesHitGroup = 0,
	ProceduralHitGroup = 0,
}

public enum VkAccelerationStructureCompatibility
{
	CompatibleKhr = 0,
	IncompatibleKhr = 1,
}

public enum VkShaderGroupShader
{
	/// <summary>
	/// Uses the shader specified in the group with slink:VkRayTracingShaderGroupCreateInfoKHR::pname:generalShader
	/// </summary>
	GeneralKhr = 0,
	/// <summary>
	/// Uses the shader specified in the group with slink:VkRayTracingShaderGroupCreateInfoKHR::pname:closestHitShader
	/// </summary>
	ClosestHitKhr = 1,
	/// <summary>
	/// Uses the shader specified in the group with slink:VkRayTracingShaderGroupCreateInfoKHR::pname:anyHitShader
	/// </summary>
	AnyHitKhr = 2,
	/// <summary>
	/// Uses the shader specified in the group with slink:VkRayTracingShaderGroupCreateInfoKHR::pname:intersectionShader
	/// </summary>
	IntersectionKhr = 3,
}

public enum VkMemoryOverallocationBehaviorAMD
{
	DefaultAmd = 0,
	AllowedAmd = 1,
	DisallowedAmd = 2,
}

[Flags]
public enum VkFramebufferCreateFlags
{
	ImagelessKhr = 0,
}

public enum VkScopeNV
{
	Device = 1,
	Workgroup = 2,
	Subgroup = 3,
	QueueFamily = 5,
}

public enum VkComponentTypeNV
{
	Float16 = 0,
	Float32 = 1,
	Float64 = 2,
	SInt8 = 3,
	SInt16 = 4,
	SInt32 = 5,
	SInt64 = 6,
	UInt8 = 7,
	UInt16 = 8,
	UInt32 = 9,
	UInt64 = 10,
}

[Flags]
public enum VkDeviceDiagnosticsConfigFlagsNV
{
	ShaderDebugInfo = 0,
	ResourceTracking = 1,
	AutomaticCheckpoints = 2,
}

[Flags]
public enum VkPipelineCreationFeedbackFlags
{
	ValidExt = 0,
	ApplicationPipelineCacheHitExt = 1,
	BasePipelineAccelerationExt = 2,
}

public enum VkFullScreenExclusive
{
	DefaultExt = 0,
	AllowedExt = 1,
	DisallowedExt = 2,
	ApplicationControlledExt = 3,
}

public enum VkPerformanceCounterScope
{
	PerformanceCounterScopeCommandBufferKhr = 0,
	PerformanceCounterScopeRenderPassKhr = 1,
	PerformanceCounterScopeCommandKhr = 2,
}

public enum VkPerformanceCounterUnit
{
	GenericKhr = 0,
	PercentageKhr = 1,
	NanosecondsKhr = 2,
	BytesKhr = 3,
	BytesPerSecondKhr = 4,
	KelvinKhr = 5,
	WattsKhr = 6,
	VoltsKhr = 7,
	AmpsKhr = 8,
	HertzKhr = 9,
	CyclesKhr = 10,
}

public enum VkPerformanceCounterStorage
{
	Int32Khr = 0,
	Int64Khr = 1,
	UInt32Khr = 2,
	UInt64Khr = 3,
	Float32Khr = 4,
	Float64Khr = 5,
}

[Flags]
public enum VkPerformanceCounterDescriptionFlags
{
	PerformanceImpactingKhr = 0,
	ConcurrentlyImpactedKhr = 1,
}

[Flags]
public enum VkAcquireProfilingLockFlags
{
	None = 0,
}

[Flags]
public enum VkShaderCorePropertiesFlagsAMD
{
	None = 0,
}

public enum VkPerformanceConfigurationTypeINTEL
{
	CommandQueueMetricsDiscoveryActivatedIntel = 0,
}

public enum VkQueryPoolSamplingModeINTEL
{
	ManualIntel = 0,
}

public enum VkPerformanceOverrideTypeINTEL
{
	NullHardwareIntel = 0,
	FlushGpuCachesIntel = 1,
}

public enum VkPerformanceParameterTypeINTEL
{
	HwCountersSupportedIntel = 0,
	StreamMarkerValidsIntel = 1,
}

public enum VkPerformanceValueTypeINTEL
{
	UInt32Intel = 0,
	UInt64Intel = 1,
	FloatIntel = 2,
	BoolIntel = 3,
	StringIntel = 4,
}

public enum VkShaderFloatControlsIndependence
{
	Independence32Only = 0,
	IndependenceAll = 1,
	IndependenceNone = 2,
	Independence32OnlyKhr = 0,
	IndependenceAllKhr = 0,
	IndependenceNoneKhr = 0,
}

public enum VkPipelineExecutableStatisticFormat
{
	Bool32Khr = 0,
	Int64Khr = 1,
	UInt64Khr = 2,
	Float64Khr = 3,
}

public enum VkLineRasterizationMode
{
	DefaultExt = 0,
	RectangularExt = 1,
	BresenhamExt = 2,
	RectangularSmoothExt = 3,
}

[Flags]
public enum VkShaderModuleCreateFlags
{
	Reserved0 = 1,
}

[Flags]
public enum VkPipelineCompilerControlFlagsAMD
{
	None = 0,
}

[Flags]
public enum VkToolPurposeFlags
{
	ValidationExt = 0,
	ProfilingExt = 1,
	TracingExt = 2,
	AdditionalFeaturesExt = 3,
	ModifyingFeaturesExt = 4,
	DebugReportingExt = 32,
	DebugMarkersExt = 64,
}

public enum VkFragmentShadingRateCombinerOp
{
	KeepKhr = 0,
	ReplaceKhr = 1,
	MinKhr = 2,
	MaxKhr = 3,
	MulKhr = 4,
}

public enum VkFragmentShadingRateNV
{
	Rate1InvocationPerPixel = 0,
	Rate1InvocationPer1x2Pixels = 1,
	Rate1InvocationPer2x1Pixels = 4,
	Rate1InvocationPer2x2Pixels = 5,
	Rate1InvocationPer2x4Pixels = 6,
	Rate1InvocationPer4x2Pixels = 9,
	Rate1InvocationPer4x4Pixels = 10,
	Rate2InvocationsPerPixel = 11,
	Rate4InvocationsPerPixel = 12,
	Rate8InvocationsPerPixel = 13,
	Rate16InvocationsPerPixel = 14,
	RateNoInvocations = 15,
}

public enum VkFragmentShadingRateTypeNV
{
	FragmentSize = 0,
	Enums = 1,
}

[Flags]
public enum VkAccessFlags2
{
	Access2NoneKhr = 0,
	Access2IndirectCommandReadKhr = 0,
	Access2IndexReadKhr = 1,
	Access2VertexAttributeReadKhr = 2,
	Access2UniformReadKhr = 3,
	Access2InputAttachmentReadKhr = 4,
	Access2ShaderReadKhr = 5,
	Access2ShaderWriteKhr = 6,
	Access2ColorAttachmentReadKhr = 7,
	Access2ColorAttachmentWriteKhr = 8,
	Access2DepthStencilAttachmentReadKhr = 9,
	Access2DepthStencilAttachmentWriteKhr = 10,
	Access2TransferReadKhr = 11,
	Access2TransferWriteKhr = 12,
	Access2HostReadKhr = 13,
	Access2HostWriteKhr = 14,
	Access2MemoryReadKhr = 15,
	Access2MemoryWriteKhr = 16,
	Access2ShaderSampledReadKhr = 32,
	Access2ShaderStorageReadKhr = 33,
	Access2ShaderStorageWriteKhr = 34,
	Access2VideoDecodeReadKhr = 8,
	Access2VideoDecodeWriteKhr = 16,
	Access2VideoEncodeReadKhr = 32,
	Access2VideoEncodeWriteKhr = 64,
	Access2TransformFeedbackWriteExt = 33554432,
	Access2TransformFeedbackCounterReadExt = 67108864,
	Access2TransformFeedbackCounterWriteExt = 134217728,
	/// <summary>
	/// read access flag for reading conditional rendering predicate
	/// </summary>
	Access2ConditionalRenderingReadExt = 1048576,
	Access2CommandPreprocessRead = 131072,
	Access2CommandPreprocessWrite = 262144,
	Access2FragmentShadingRateAttachmentReadKhr = 8388608,
	Access2ShadingRateImageRead = 0,
	Access2AccelerationStructureReadKhr = 2097152,
	Access2AccelerationStructureWriteKhr = 4194304,
	Access2AccelerationStructureRead = 0,
	Access2AccelerationStructureWrite = 0,
	Access2FragmentDensityMapReadExt = 16777216,
	Access2ColorAttachmentReadNoncoherentExt = 524288,
	Access2Reserved41Amd = 512,
	Access2InvocationMaskReadHuawei = 128,
	Access2Reserved387Khr = 256,
}

[Flags]
public enum VkPipelineStageFlags2
{
	Stage2NoneKhr = 0,
	Stage2TopOfPipeKhr = 0,
	Stage2DrawIndirectKhr = 1,
	Stage2VertexInputKhr = 2,
	Stage2VertexShaderKhr = 3,
	Stage2TessellationControlShaderKhr = 4,
	Stage2TessellationEvaluationShaderKhr = 5,
	Stage2GeometryShaderKhr = 6,
	Stage2FragmentShaderKhr = 7,
	Stage2EarlyFragmentTestsKhr = 8,
	Stage2LateFragmentTestsKhr = 9,
	Stage2ColorAttachmentOutputKhr = 10,
	Stage2ComputeShaderKhr = 11,
	Stage2AllTransferKhr = 12,
	Stage2BottomOfPipeKhr = 13,
	Stage2HostKhr = 14,
	Stage2AllGraphicsKhr = 15,
	Stage2AllCommandsKhr = 16,
	Stage2CopyKhr = 32,
	Stage2ResolveKhr = 33,
	Stage2BlitKhr = 34,
	Stage2ClearKhr = 35,
	Stage2IndexInputKhr = 36,
	Stage2VertexAttributeInputKhr = 37,
	Stage2PreRasterizationShadersKhr = 38,
	Stage2VideoDecodeKhr = 67108864,
	Stage2VideoEncodeKhr = 134217728,
	Stage2TransformFeedbackExt = 16777216,
	/// <summary>
	/// A pipeline stage for conditional rendering predicate fetch
	/// </summary>
	Stage2ConditionalRenderingExt = 262144,
	Stage2CommandPreprocess = 131072,
	Stage2FragmentShadingRateAttachmentKhr = 4194304,
	Stage2ShadingRateImage = 0,
	Stage2AccelerationStructureBuildKhr = 33554432,
	Stage2RayTracingShaderKhr = 2097152,
	Stage2RayTracingShader = 0,
	Stage2AccelerationStructureBuild = 0,
	Stage2FragmentDensityProcessExt = 8388608,
	Stage2TaskShader = 524288,
	Stage2MeshShader = 1048576,
	Stage2SubpassShadingHuawei = 128,
	Stage2InvocationMaskHuawei = 256,
	Stage2Reserved387Khr = 268435456,
}

[Flags]
public enum VkSubmitFlags
{
	/// <summary>
	/// Specifies that this batch is a protected submission.
	/// </summary>
	ProtectedKhr = 0,
}

[Flags]
public enum VkEventCreateFlags
{
	DeviceOnlyKhr = 1,
}

[Flags]
public enum VkPipelineLayoutCreateFlags
{
	Reserved0Amd = 1,
	Reserved1Amd = 2,
}

public enum VkProvokingVertexMode
{
	FirstVertexExt = 0,
	LastVertexExt = 1,
}

public enum VkAccelerationStructureMotionInstanceTypeNV
{
	Static = 0,
	MatrixMotion = 1,
	SrtMotion = 2,
}

[Flags]
public enum VkPipelineColorBlendStateCreateFlags
{
	RasterizationOrderAttachmentAccessArm = 1,
}

[Flags]
public enum VkPipelineDepthStencilStateCreateFlags
{
	DepthAccessArm = 1,
	StencilAccessArm = 2,
}

[Flags]
public enum VkVideoCodecOperationFlags
{
	InvalidKhr = 0,
	EncodeH264Ext = 65536,
	EncodeH265Ext = 131072,
	DecodeH264Ext = 1,
	DecodeH265Ext = 2,
}

[Flags]
public enum VkVideoChromaSubsamplingFlags
{
	SubsamplingInvalidKhr = 0,
	SubsamplingMonochromeKhr = 0,
	Subsampling420Khr = 1,
	Subsampling422Khr = 2,
	Subsampling444Khr = 3,
}

[Flags]
public enum VkVideoComponentBitDepthFlags
{
	DepthInvalidKhr = 0,
	Depth8Khr = 0,
	Depth10Khr = 2,
	Depth12Khr = 4,
}

[Flags]
public enum VkVideoCapabilityFlags
{
	ProtectedContentKhr = 0,
	SeparateReferenceImagesKhr = 1,
}

[Flags]
public enum VkVideoSessionCreateFlags
{
	DefaultKhr = 0,
	ProtectedContentKhr = 0,
}

[Flags]
public enum VkVideoCodingQualityPresetFlags
{
	NormalKhr = 0,
	PowerKhr = 1,
	QualityKhr = 2,
}

[Flags]
public enum VkVideoDecodeH264PictureLayoutFlags
{
	ProgressiveExt = 0,
	InterlacedInterleavedLinesExt = 0,
	InterlacedSeparatePlanesExt = 1,
}

[Flags]
public enum VkVideoCodingControlFlags
{
	DefaultKhr = 0,
	ResetKhr = 0,
}

public enum VkQueryResultStatus
{
	/// <summary>
	/// Specifies that operations did not complete successfully.
	/// </summary>
	ErrorKhr = -1,
	/// <summary>
	/// Specifies that the query result is not yet available.
	/// </summary>
	NotReadyKhr = 0,
	/// <summary>
	/// Specifies that operations completed successfully and the query result is available.--
	/// </summary>
	CompleteKhr = 1,
}

[Flags]
public enum VkVideoDecodeFlags
{
	DefaultKhr = 0,
	Reserved0Khr = 0,
}

[Flags]
public enum VkVideoEncodeFlags
{
	DefaultKhr = 0,
	Reserved0Khr = 0,
}

[Flags]
public enum VkVideoEncodeRateControlFlags
{
	DefaultKhr = 0,
	ResetKhr = 0,
}

[Flags]
public enum VkVideoEncodeRateControlModeFlags
{
	NoneKhr = 0,
	CbrKhr = 1,
	VbrKhr = 2,
}

[Flags]
public enum VkVideoEncodeH264CapabilityFlags
{
	CabacExt = 0,
	CavlcExt = 1,
	WeightedBiPredImplicitExt = 2,
	Transform8x8Ext = 3,
	ChromaQpOffsetExt = 4,
	SecondChromaQpOffsetExt = 5,
	DeblockingFilterDisabledExt = 6,
	DeblockingFilterEnabledExt = 7,
	DeblockingFilterPartialExt = 8,
	MultipleSlicePerFrameExt = 9,
	EvenlyDistributedSliceSizeExt = 10,
}

[Flags]
public enum VkVideoEncodeH264InputModeFlags
{
	FrameExt = 0,
	SliceExt = 1,
	NonVclExt = 2,
}

[Flags]
public enum VkVideoEncodeH264OutputModeFlags
{
	FrameExt = 0,
	SliceExt = 1,
	NonVclExt = 2,
}

[Flags]
public enum VkVideoEncodeH264CreateFlags
{
	DefaultExt = 0,
	Reserved0Ext = 0,
}

[Flags]
public enum VkImageFormatConstraintsFlagsFUCHSIA
{
	None = 0,
}

[Flags]
public enum VkImageConstraintsInfoFlagsFUCHSIA
{
	CpuReadRarelyFuchsia = 0,
	CpuReadOftenFuchsia = 1,
	CpuWriteRarelyFuchsia = 2,
	CpuWriteOftenFuchsia = 3,
	/// <summary>
	/// Specifies that protected memory is optional for the buffer collection.
	/// </summary>
	ProtectedOptionalFuchsia = 4,
}

[Flags]
public enum VkFormatFeatureFlags2
{
	Feature2SampledImageKhr = 0,
	Feature2StorageImageKhr = 1,
	Feature2StorageImageAtomicKhr = 2,
	Feature2UniformTexelBufferKhr = 3,
	Feature2StorageTexelBufferKhr = 4,
	Feature2StorageTexelBufferAtomicKhr = 5,
	Feature2VertexBufferKhr = 6,
	Feature2ColorAttachmentKhr = 7,
	Feature2ColorAttachmentBlendKhr = 8,
	Feature2DepthStencilAttachmentKhr = 9,
	Feature2BlitSrcKhr = 10,
	Feature2BlitDstKhr = 11,
	Feature2SampledImageFilterLinearKhr = 12,
	Feature2SampledImageFilterCubicExt = 13,
	Feature2TransferSrcKhr = 14,
	Feature2TransferDstKhr = 15,
	Feature2SampledImageFilterMinmaxKhr = 16,
	Feature2MidpointChromaSamplesKhr = 17,
	Feature2SampledImageYcbcrConversionLinearFilterKhr = 18,
	Feature2SampledImageYcbcrConversionSeparateReconstructionFilterKhr = 19,
	Feature2SampledImageYcbcrConversionChromaReconstructionExplicitKhr = 20,
	Feature2SampledImageYcbcrConversionChromaReconstructionExplicitForceableKhr = 21,
	Feature2DisjointKhr = 22,
	Feature2CositedChromaSamplesKhr = 23,
	Feature2StorageReadWithoutFormatKhr = 31,
	Feature2StorageWriteWithoutFormatKhr = 32,
	Feature2SampledImageDepthComparisonKhr = 33,
	Feature2VideoDecodeOutputKhr = 33554432,
	Feature2VideoDecodeDpbKhr = 67108864,
	Feature2AccelerationStructureVertexBufferKhr = 536870912,
	Feature2FragmentDensityMapExt = 16777216,
	Feature2FragmentShadingRateAttachmentKhr = 1073741824,
	Feature2VideoEncodeInputKhr = 134217728,
	Feature2VideoEncodeDpbKhr = 268435456,
}

[Flags]
public enum VkVideoEncodeH265InputModeFlags
{
	FrameExt = 0,
	SliceExt = 1,
	NonVclExt = 2,
}

[Flags]
public enum VkVideoEncodeH265OutputModeFlags
{
	FrameExt = 0,
	SliceExt = 1,
	NonVclExt = 2,
}

[Flags]
public enum VkVideoEncodeH265CtbSizeFlags
{
	Size8Ext = 0,
	Size16Ext = 1,
	Size32Ext = 2,
	Size64Ext = 3,
}

[Flags]
public enum VkRenderingFlags
{
	ContentsSecondaryCommandBuffersKhr = 0,
	SuspendingKhr = 1,
	ResumingKhr = 2,
}

